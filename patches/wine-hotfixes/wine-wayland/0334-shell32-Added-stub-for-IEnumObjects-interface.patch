From 07cfaf7210b7aa899415497b281b6b76f933bd7b Mon Sep 17 00:00:00 2001
From: Kevin Martinez <kevinrmartinezj@gmail.com>
Date: Wed, 17 Jul 2024 15:10:49 -0400
Subject: [PATCH 334/365] shell32: Added stub for IEnumObjects interface.

---
 dlls/actxprxy/usrmarshal.c       |  17 ++++
 dlls/shell32/Makefile.in         |   1 +
 dlls/shell32/enumobjects.c       | 166 +++++++++++++++++++++++++++++++
 dlls/shell32/shell32_classes.idl |   5 +
 dlls/shell32/shell32_main.h      |   1 +
 dlls/shell32/shellole.c          |   1 +
 include/shobjidl.idl             |  14 +++
 7 files changed, 205 insertions(+)
 create mode 100644 dlls/shell32/enumobjects.c

diff --git a/dlls/actxprxy/usrmarshal.c b/dlls/actxprxy/usrmarshal.c
index e4eada6848f..b33112d63ba 100644
--- a/dlls/actxprxy/usrmarshal.c
+++ b/dlls/actxprxy/usrmarshal.c
@@ -247,3 +247,20 @@ HRESULT __RPC_STUB IParentAndItem_GetParentAndItem_Proxy(
     TRACE("(%p)->(%p %p %p)\n", This, parent, folder, child);
     return IParentAndItem_RemoteGetParentAndItem_Proxy(This, parent, folder, child);
 }
+
+HRESULT CALLBACK IEnumObjects_Next_Proxy(IEnumObjects *This, ULONG celt, REFIID riid, void **rgelt, ULONG *pceltFetched)
+{
+    ULONG fetched;
+    TRACE("(%p)->(%ld, %p, %p, %p)\n", This, celt, debugstr_guid(riid), rgelt, pceltFetched);
+    if (!pceltFetched) pceltFetched = &fetched;
+    return IEnumObjects_RemoteNext_Proxy(This, celt, riid, rgelt, pceltFetched);
+}
+
+HRESULT __RPC_STUB IEnumObjects_Next_Stub(IEnumObjects *This, ULONG celt, REFIID riid, void **rgelt, ULONG *pceltFetched)
+{
+    HRESULT hr;
+    TRACE("(%p)->(%ld, %p, %p, %p)\n", This, celt, debugstr_guid(riid), rgelt, pceltFetched);
+    *pceltFetched = 0;
+    hr = IEnumObjects_Next(This, celt, riid, rgelt, pceltFetched);
+    return hr;
+}
diff --git a/dlls/shell32/Makefile.in b/dlls/shell32/Makefile.in
index 4a906ac59db..c2df32b62ec 100644
--- a/dlls/shell32/Makefile.in
+++ b/dlls/shell32/Makefile.in
@@ -21,6 +21,7 @@ SOURCES = \
 	dragdrophelper.c \
 	ebrowser.c \
 	enumidlist.c \
+	enumobjects.c \
 	folders.c \
 	iconcache.c \
 	new_menu.c \
diff --git a/dlls/shell32/enumobjects.c b/dlls/shell32/enumobjects.c
new file mode 100644
index 00000000000..16ad52168d8
--- /dev/null
+++ b/dlls/shell32/enumobjects.c
@@ -0,0 +1,166 @@
+/*
+ * EnumerableObjectCollection
+ *
+ * Copyright 2024 Kevin Martinez
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
+ */
+
+#include <stdarg.h>
+#include <stdlib.h>
+#include <string.h>
+
+#define COBJMACROS
+
+#include "wine/debug.h"
+#include "windef.h"
+#include "winbase.h"
+#include "winreg.h"
+#include "shlwapi.h"
+
+#include "shell32_main.h"
+
+WINE_DEFAULT_DEBUG_CHANNEL(shell);
+
+struct enum_objects
+{
+    IEnumObjects IEnumObjects_iface;
+    LONG ref;
+};
+
+static inline struct enum_objects *impl_from_IEnumObjects(IEnumObjects *iface)
+{
+    return CONTAINING_RECORD(iface, struct enum_objects, IEnumObjects_iface);
+}
+
+static HRESULT WINAPI enum_objects_QueryInterface(IEnumObjects *iface, REFIID riid, void **obj)
+{
+    struct enum_objects *This = impl_from_IEnumObjects(iface);
+
+    TRACE("(%p)->(%s, %p)\n", This, debugstr_guid(riid), obj);
+
+    *obj = NULL;
+
+    if (IsEqualIID(riid, &IID_IUnknown) || IsEqualIID(riid, &IID_IEnumObjects))
+    {
+        *obj = &This->IEnumObjects_iface;
+    }
+
+    if (*obj)
+    {
+        IUnknown_AddRef((IUnknown*)*obj);
+        return S_OK;
+    }
+
+    WARN("no interface for %s.\n", debugstr_guid(riid));
+
+    return E_NOINTERFACE;
+}
+
+static ULONG WINAPI enum_objects_AddRef(IEnumObjects *iface)
+{
+    struct enum_objects *This = impl_from_IEnumObjects(iface);
+    ULONG refcount = InterlockedIncrement(&This->ref);
+
+    TRACE("(%p): increasing refcount to %lu.\n", This, refcount);
+
+    return refcount;
+}
+
+ static ULONG WINAPI enum_objects_Release(IEnumObjects *iface)
+{
+    struct enum_objects *This = impl_from_IEnumObjects(iface);
+    ULONG refcount = InterlockedDecrement(&This->ref);
+
+    TRACE("(%p): decreasing refcount to %lu.\n", This, refcount);
+
+    if (!refcount)
+    {
+        free(This);
+    }
+
+    return refcount;
+}
+
+static HRESULT WINAPI enum_objects_Next(IEnumObjects *iface, ULONG celt, REFIID riid, void **rgelt, ULONG *celtFetched)
+{
+    struct enum_objects *This = impl_from_IEnumObjects(iface);
+
+    FIXME("(%p %ld, %p)->(%p, %p): stub!\n", This, celt, debugstr_guid(riid), rgelt, celtFetched);
+
+    if (celtFetched)
+        *celtFetched = 0;
+
+    return S_FALSE;
+}
+
+static HRESULT WINAPI enum_objects_Skip(IEnumObjects *iface, ULONG celt)
+{
+    struct enum_objects *This = impl_from_IEnumObjects(iface);
+
+    FIXME("(%p %ld): stub!\n", This, celt);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI enum_objects_Reset(IEnumObjects *iface)
+{
+    struct enum_objects *This = impl_from_IEnumObjects(iface);
+
+    FIXME("(%p): stub!\n", This);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI enum_objects_Clone(IEnumObjects *iface, IEnumObjects **ppenum)
+{
+    struct enum_objects *This = impl_from_IEnumObjects(iface);
+
+    FIXME("(%p)->(%p): stub!\n", This, ppenum);
+
+    return E_NOTIMPL;
+}
+
+static const IEnumObjectsVtbl enum_objects_vtbl =
+{
+    enum_objects_QueryInterface,
+    enum_objects_AddRef,
+    enum_objects_Release,
+    enum_objects_Next,
+    enum_objects_Skip,
+    enum_objects_Reset,
+    enum_objects_Clone,
+};
+
+HRESULT WINAPI EnumerableObjectCollection_Constructor(IUnknown *outer, REFIID riid, void **obj)
+{
+    struct enum_objects *This;
+    HRESULT hr;
+
+    TRACE("(%p, %s, %p)\n", outer, debugstr_guid(riid), obj);
+
+    if (outer)
+        return CLASS_E_NOAGGREGATION;
+
+    if (!(This = heap_alloc(sizeof(*This))))
+        return E_OUTOFMEMORY;
+
+    This->ref = 1;
+    This->IEnumObjects_iface.lpVtbl = &enum_objects_vtbl;
+
+    hr = IEnumObjects_QueryInterface(&This->IEnumObjects_iface, riid, obj);
+    IEnumObjects_Release(&This->IEnumObjects_iface);
+    return hr;
+}
diff --git a/dlls/shell32/shell32_classes.idl b/dlls/shell32/shell32_classes.idl
index 932b6f395b2..9e2df630940 100644
--- a/dlls/shell32/shell32_classes.idl
+++ b/dlls/shell32/shell32_classes.idl
@@ -194,3 +194,8 @@ coclass NewMenu {}
     threading(apartment),
     uuid(9ac9fbe1-e0a2-4ad6-b4ee-e212013ea917)
 ] coclass ShellItem { interface IShellItem2; }
+
+[
+    threading(apartment),
+    uuid(2d3468c1-36a7-43b6-ac24-d3f02fd9607a)
+] coclass EnumerableObjectCollection {}
diff --git a/dlls/shell32/shell32_main.h b/dlls/shell32/shell32_main.h
index 6b5575c6879..c4b301f500a 100644
--- a/dlls/shell32/shell32_main.h
+++ b/dlls/shell32/shell32_main.h
@@ -103,6 +103,7 @@ HRESULT WINAPI ExplorerBrowser_Constructor(IUnknown *pUnkOuter, REFIID riid, LPV
 HRESULT WINAPI KnownFolderManager_Constructor(IUnknown *pUnkOuter, REFIID riid, LPVOID *ppv);
 HRESULT WINAPI IFileOperation_Constructor(IUnknown *outer, REFIID riid, void **out);
 HRESULT WINAPI ActiveDesktop_Constructor(IUnknown *outer, REFIID riid, void **out);
+HRESULT WINAPI EnumerableObjectCollection_Constructor(IUnknown *outer, REFIID riid, void **obj);
 
 extern HRESULT CPanel_GetIconLocationW(LPCITEMIDLIST, LPWSTR, UINT, int*);
 HRESULT WINAPI CPanel_ExtractIconA(LPITEMIDLIST pidl, LPCSTR pszFile, UINT nIconIndex, HICON *phiconLarge, HICON *phiconSmall, UINT nIconSize);
diff --git a/dlls/shell32/shellole.c b/dlls/shell32/shellole.c
index aa9bd3e0f3e..fc3f6b032cd 100644
--- a/dlls/shell32/shellole.c
+++ b/dlls/shell32/shellole.c
@@ -87,6 +87,7 @@ static const struct {
 	{&CLSID_ShellImageDataFactory, ShellImageDataFactory_Constructor},
 	{&CLSID_FileOperation, IFileOperation_Constructor},
 	{&CLSID_ActiveDesktop, ActiveDesktop_Constructor},
+	{&CLSID_EnumerableObjectCollection, EnumerableObjectCollection_Constructor},
 	{NULL, NULL}
 };
 
diff --git a/include/shobjidl.idl b/include/shobjidl.idl
index 4118e3d9ba2..aa393225db1 100644
--- a/include/shobjidl.idl
+++ b/include/shobjidl.idl
@@ -4134,3 +4134,17 @@ interface IFileOperation : IUnknown
     HRESULT PerformOperations();
     HRESULT GetAnyOperationsAborted([out] BOOL *aborted);
 }
+
+[
+    object,
+    uuid(2c1c7e2e-2d0e-4059-831e-1e6f82335c2e),
+    pointer_default(unique)
+]
+interface IEnumObjects : IUnknown
+{
+    [local] HRESULT Next([in] ULONG celt, [in] REFIID riid, [out, iid_is(riid)] void **rgelt, [out, optional] ULONG *pceltFetched);
+    [call_as(Next)] HRESULT RemoteNext([in] ULONG  celt, [in] REFIID riid, [out, size_is(celt), length_is(*pceltFetched), iid_is(riid)] void **rgelt, [out] ULONG *pceltFetched);
+    HRESULT Skip([in] ULONG celt);
+    HRESULT Reset();
+    HRESULT Clone([out] IEnumObjects **ppenum);
+}
-- 
2.50.1


From 415d0999475bcb7b407740167f579b2ba12d4cf3 Mon Sep 17 00:00:00 2001
From: Etaash Mathamsetty
 <45927311+Etaash-mathamsetty@users.noreply.github.com>
Date: Mon, 11 Aug 2025 13:06:41 -0400
Subject: [PATCH 293/341] winewayland: Add support for content-type-v1.

---
 dlls/winewayland.drv/Makefile.in         |   1 +
 dlls/winewayland.drv/content-type-v1.xml | 128 +++++++++++++++++++++++
 dlls/winewayland.drv/wayland.c           |  18 +++-
 dlls/winewayland.drv/wayland_surface.c   |  18 ++++
 dlls/winewayland.drv/waylanddrv.h        |   3 +
 5 files changed, 163 insertions(+), 5 deletions(-)
 create mode 100644 dlls/winewayland.drv/content-type-v1.xml

diff --git a/dlls/winewayland.drv/Makefile.in b/dlls/winewayland.drv/Makefile.in
index bc4232086e1..46d946d4dce 100644
--- a/dlls/winewayland.drv/Makefile.in
+++ b/dlls/winewayland.drv/Makefile.in
@@ -5,6 +5,7 @@ UNIX_LIBS = -lwin32u $(WAYLAND_CLIENT_LIBS) $(WAYLAND_EGL_LIBS) $(XKBCOMMON_LIBS
 IMPORTS = user32 win32u
 
 SOURCES = \
+	content-type-v1.xml \
 	color-management-v1.xml \
 	cursor-shape-v1.xml \
 	display.c \
diff --git a/dlls/winewayland.drv/content-type-v1.xml b/dlls/winewayland.drv/content-type-v1.xml
new file mode 100644
index 00000000000..65a1acb80f4
--- /dev/null
+++ b/dlls/winewayland.drv/content-type-v1.xml
@@ -0,0 +1,128 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<protocol name="content_type_v1">
+  <copyright>
+    Copyright © 2021 Emmanuel Gil Peyrot
+    Copyright © 2022 Xaver Hugl
+
+    Permission is hereby granted, free of charge, to any person obtaining a
+    copy of this software and associated documentation files (the "Software"),
+    to deal in the Software without restriction, including without limitation
+    the rights to use, copy, modify, merge, publish, distribute, sublicense,
+    and/or sell copies of the Software, and to permit persons to whom the
+    Software is furnished to do so, subject to the following conditions:
+
+    The above copyright notice and this permission notice (including the next
+    paragraph) shall be included in all copies or substantial portions of the
+    Software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+    DEALINGS IN THE SOFTWARE.
+  </copyright>
+
+  <interface name="wp_content_type_manager_v1" version="1">
+    <description summary="surface content type manager">
+      This interface allows a client to describe the kind of content a surface
+      will display, to allow the compositor to optimize its behavior for it.
+
+      Warning! The protocol described in this file is currently in the testing
+      phase. Backward compatible changes may be added together with the
+      corresponding interface version bump. Backward incompatible changes can
+      only be done by creating a new major version of the extension.
+    </description>
+
+    <request name="destroy" type="destructor">
+      <description summary="destroy the content type manager object">
+        Destroy the content type manager. This doesn't destroy objects created
+        with the manager.
+      </description>
+    </request>
+
+    <enum name="error">
+      <entry name="already_constructed" value="0"
+             summary="wl_surface already has a content type object"/>
+    </enum>
+
+    <request name="get_surface_content_type">
+      <description summary="create a new content type object">
+        Create a new content type object associated with the given surface.
+
+        Creating a wp_content_type_v1 from a wl_surface which already has one
+        attached is a client error: already_constructed.
+      </description>
+      <arg name="id" type="new_id" interface="wp_content_type_v1"/>
+      <arg name="surface" type="object" interface="wl_surface"/>
+    </request>
+  </interface>
+
+  <interface name="wp_content_type_v1" version="1">
+    <description summary="content type object for a surface">
+      The content type object allows the compositor to optimize for the kind
+      of content shown on the surface. A compositor may for example use it to
+      set relevant drm properties like "content type".
+
+      The client may request to switch to another content type at any time.
+      When the associated surface gets destroyed, this object becomes inert and
+      the client should destroy it.
+    </description>
+
+    <request name="destroy" type="destructor">
+      <description summary="destroy the content type object">
+        Switch back to not specifying the content type of this surface. This is
+        equivalent to setting the content type to none, including double
+        buffering semantics. See set_content_type for details.
+      </description>
+    </request>
+
+    <enum name="type">
+      <description summary="possible content types">
+        These values describe the available content types for a surface.
+      </description>
+      <entry name="none" value="0">
+        <description summary="no content type applies">
+          The content type none means that either the application has no data
+          about the content type, or that the content doesn't fit into one of
+          the other categories.
+        </description>
+      </entry>
+      <entry name="photo" value="1">
+        <description summary="photo content type">
+          The content type photo describes content derived from digital still
+          pictures and may be presented with minimal processing.
+        </description>
+      </entry>
+      <entry name="video" value="2">
+        <description summary="video content type">
+          The content type video describes a video or animation and may be
+          presented with more accurate timing to avoid stutter. Where scaling
+          is needed, scaling methods more appropriate for video may be used.
+        </description>
+      </entry>
+      <entry name="game" value="3">
+        <description summary="game content type">
+          The content type game describes a running game. Its content may be
+          presented with reduced latency.
+        </description>
+      </entry>
+    </enum>
+
+    <request name="set_content_type">
+      <description summary="specify the content type">
+        Set the surface content type. This informs the compositor that the
+        client believes it is displaying buffers matching this content type.
+
+        This is purely a hint for the compositor, which can be used to adjust
+        its behavior or hardware settings to fit the presented content best.
+
+        The content type is double-buffered state, see wl_surface.commit for
+        details.
+      </description>
+      <arg name="content_type" type="uint" enum="type"
+           summary="the content type"/>
+    </request>
+  </interface>
+</protocol>
diff --git a/dlls/winewayland.drv/wayland.c b/dlls/winewayland.drv/wayland.c
index f6cadedf37d..1b7fbfe15b5 100644
--- a/dlls/winewayland.drv/wayland.c
+++ b/dlls/winewayland.drv/wayland.c
@@ -220,6 +220,11 @@ static void registry_handle_global(void *data, struct wl_registry *registry,
         process_wayland.xdg_activation_v1 =
             wl_registry_bind(registry, id, &xdg_activation_v1_interface, 1);
     }
+    else if (strcmp(interface, "wp_content_type_manager_v1") == 0)
+    {
+        process_wayland.wp_content_type_manager_v1 =
+            wl_registry_bind(registry, id, &wp_content_type_manager_v1_interface, 1);
+    }
 }
 
 static void registry_handle_global_remove(void *data, struct wl_registry *registry,
@@ -351,19 +356,22 @@ BOOL wayland_process_init(void)
     }
 
     if (!process_wayland.xdg_toplevel_icon_manager_v1)
-        ERR("Wayland compositor doesn't support xdg_toplevel_icon_manager_v1 (window icons will not be supported)\n");
+        ERR("Wayland compositor doesn't support optional xdg_toplevel_icon_manager_v1 (window icons will not be supported)\n");
 
     if (!process_wayland.wp_fractional_scale_manager_v1)
-        ERR("Wayland compositor doesn't support wp_fractional_scale_manager_v1 (fractional scaling will be broken)\n");
+        ERR("Wayland compositor doesn't support optional wp_fractional_scale_manager_v1 (fractional scaling will be broken)\n");
 
     if (!process_wayland.wp_color_manager_v1)
-        ERR("Wayland compositor doesn't support wp_color_manager_v1 (HDR will not be supported)\n");
+        ERR("Wayland compositor doesn't support optional wp_color_manager_v1 (HDR metadata will not be supported)\n");
 
     if (!process_wayland.xdg_system_bell_v1)
-        ERR("Wayland compositor doesn't xdg_system_bell_v1! (Beep will not be supported)\n");
+        ERR("Wayland compositor doesn't optional xdg_system_bell_v1! (Beep will not be supported)\n");
 
     if (!process_wayland.xdg_activation_v1)
-        ERR("Wayland compositor doesn't support xdg_activation_v1! (Flash Window will not be supported)\n");
+        ERR("Wayland compositor doesn't support optional xdg_activation_v1! (Flash Window will not be supported)\n");
+
+    if (!process_wayland.wp_content_type_manager_v1)
+        WARN("Wayland compositor doesn't support optional wp_content_type_manager_v1!\n");
 
     process_wayland.initialized = TRUE;
 
diff --git a/dlls/winewayland.drv/wayland_surface.c b/dlls/winewayland.drv/wayland_surface.c
index c39cc8b7243..302fcb7b663 100644
--- a/dlls/winewayland.drv/wayland_surface.c
+++ b/dlls/winewayland.drv/wayland_surface.c
@@ -229,12 +229,24 @@ struct wayland_surface *wayland_surface_create(HWND hwnd)
             wp_fractional_scale_manager_v1_get_fractional_scale(
                 process_wayland.wp_fractional_scale_manager_v1,
                 surface->wl_surface);
+        if (!surface->wp_fractional_scale_v1) goto err;
         wp_fractional_scale_v1_add_listener(
             surface->wp_fractional_scale_v1,
             &wp_fractional_scale_listener,
             hwnd);
     }
 
+    if (process_wayland.wp_content_type_manager_v1)
+    {
+        TRACE("using game content type!\n");
+        surface->wp_content_type_v1 =
+        wp_content_type_manager_v1_get_surface_content_type(
+            process_wayland.wp_content_type_manager_v1, surface->wl_surface);
+        if (!surface->wp_content_type_v1) goto err;
+        wp_content_type_v1_set_content_type(
+            surface->wp_content_type_v1, WP_CONTENT_TYPE_V1_TYPE_GAME);
+    }
+
     return surface;
 
 err:
@@ -277,6 +289,12 @@ void wayland_surface_destroy(struct wayland_surface *surface)
         surface->wp_fractional_scale_v1 = NULL;
     }
 
+    if (surface->wp_content_type_v1)
+    {
+        wp_content_type_v1_destroy(surface->wp_content_type_v1);
+        surface->wp_content_type_v1 = NULL;
+    }
+
     if (surface->wp_viewport)
     {
         wp_viewport_destroy(surface->wp_viewport);
diff --git a/dlls/winewayland.drv/waylanddrv.h b/dlls/winewayland.drv/waylanddrv.h
index 017326bc7f3..aa47802bbbb 100644
--- a/dlls/winewayland.drv/waylanddrv.h
+++ b/dlls/winewayland.drv/waylanddrv.h
@@ -43,6 +43,7 @@
 #include "color-management-v1-client-protocol.h"
 #include "xdg-system-bell-v1-client-protocol.h"
 #include "xdg-activation-v1-client-protocol.h"
+#include "content-type-v1-client-protocol.h"
 
 #include "windef.h"
 #include "winbase.h"
@@ -209,6 +210,7 @@ struct wayland
     struct wl_data_device_manager *wl_data_device_manager;
     struct xdg_toplevel_icon_manager_v1 *xdg_toplevel_icon_manager_v1;
     struct wp_cursor_shape_manager_v1 *wp_cursor_shape_manager_v1;
+    struct wp_content_type_manager_v1 *wp_content_type_manager_v1;
     struct wp_color_manager_v1 *wp_color_manager_v1;
     struct xdg_system_bell_v1 *xdg_system_bell_v1;
     struct xdg_activation_v1 *xdg_activation_v1;
@@ -326,6 +328,7 @@ struct wayland_surface
     struct wl_output *requested_output;
     struct wp_viewport *wp_viewport;
     struct wp_fractional_scale_v1 *wp_fractional_scale_v1;
+    struct wp_content_type_v1 *wp_content_type_v1;
 
     enum wayland_surface_role role;
     union
-- 
2.50.1


From ab4404636197e2cd115196d2f3810d835a572464 Mon Sep 17 00:00:00 2001
From: Etaash Mathamsetty
 <45927311+Etaash-mathamsetty@users.noreply.github.com>
Date: Fri, 22 Aug 2025 00:59:57 -0400
Subject: [PATCH 336/341] amdxc: Port to SDK headers.

---
 dlls/amdxc64/amdxc_interfaces.idl | 274 +++++++++++++++++++++++++++++-
 dlls/amdxc64/main.c               | 104 +++++++-----
 2 files changed, 325 insertions(+), 53 deletions(-)

diff --git a/dlls/amdxc64/amdxc_interfaces.idl b/dlls/amdxc64/amdxc_interfaces.idl
index 0c88ec17540..e150a83e6ac 100644
--- a/dlls/amdxc64/amdxc_interfaces.idl
+++ b/dlls/amdxc64/amdxc_interfaces.idl
@@ -1,5 +1,6 @@
 /*
  * Copyright 2025 Etaash Mathamsetty
+ * Copyright (c) 2016-2025 Advanced Micro Devices, Inc. All rights reserved.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -19,6 +20,10 @@
 
 import "wtypes.idl";
 import "unknwn.idl";
+import "d3d12.idl";
+
+
+/* the following are publicly available */
 
 [
     object,
@@ -40,14 +45,62 @@ interface IAmdExtAntiLagApi : IUnknown
     HRESULT UpdateAntiLagState([in, out] void* pData);
 }
 
+/* The following were reverse engineered, but updated with interface, function names & structures from AMD headers */
+
+typedef struct
+{
+    unsigned int waveSize;
+    unsigned int minWaveSize;
+    unsigned int maxWaveSize;
+    unsigned int reserved[5];
+} AmdExtD3DShaderIntrinsicsInfo;
+
+typedef enum
+{
+    AmdExtD3DShaderIntrinsicsSupport_Readfirstlane        = 0x1,
+    AmdExtD3DShaderIntrinsicsSupport_Readlane             = 0x2,
+    AmdExtD3DShaderIntrinsicsSupport_LaneId               = 0x3,
+    AmdExtD3DShaderIntrinsicsSupport_Swizzle              = 0x4,
+    AmdExtD3DShaderIntrinsicsSupport_Ballot               = 0x5,
+    AmdExtD3DShaderIntrinsicsSupport_MBCnt                = 0x6,
+    AmdExtD3DShaderIntrinsicsSupport_Compare3             = 0x7,
+    AmdExtD3DShaderIntrinsicsSupport_Barycentrics         = 0x8,
+    AmdExtD3DShaderIntrinsicsSupport_WaveReduce           = 0x9,
+    AmdExtD3DShaderIntrinsicsSupport_WaveScan             = 0xA,
+    AmdExtD3DShaderIntrinsicsSupport_LoadDwordAtAddr      = 0xB,
+    AmdExtD3DShaderIntrinsicsSupport_Reserved1            = 0xC,
+    AmdExtD3DShaderIntrinsicsSupport_IntersectInternal    = 0xD,
+    AmdExtD3DShaderIntrinsicsSupport_DrawIndex            = 0xE,
+    AmdExtD3DShaderIntrinsicsSupport_AtomicU64            = 0xF,
+    AmdExtD3DShaderIntrinsicsSupport_BaseInstance         = 0x10,
+    AmdExtD3DShaderIntrinsicsSupport_BaseVertex           = 0x11,
+    AmdExtD3DShaderIntrinsicsSupport_FloatConversion      = 0x12,
+    AmdExtD3DShaderIntrinsicsSupport_GetWaveSize          = 0x13,
+    AmdExtD3DShaderIntrinsicsSupport_ReadlaneAt           = 0x14,
+    AmdExtD3DShaderIntrinsicsSupport_RayTraceHitToken     = 0x15,
+    AmdExtD3DShaderIntrinsicsSupport_ShaderClock          = 0x16,
+    AmdExtD3DShaderIntrinsicsSupport_ShaderRealtimeClock  = 0x17,
+    AmdExtD3DShaderIntrinsicsSupport_Halt                 = 0x18,
+    AmdExtD3DShaderIntrinsicsSupport_IntersectBvhNode     = 0x19,
+    AmdExtD3DShaderIntrinsicsSupport_BufferStoreByte      = 0x1A,
+    AmdExtD3DShaderIntrinsicsSupport_BufferStoreShort     = 0x1B,
+    AmdExtD3DShaderIntrinsicsSupport_ShaderMarker         = 0x1C,
+    AmdExtD3DShaderIntrinsicsSupport_FloatOpWithRoundMode = 0x1D,
+    AmdExtD3DShaderIntrinsicsSupport_Reserved2            = 0x1E,
+    AmdExtD3DShaderIntrinsicsSupport_WaveMatrix           = 0x1F,
+    AmdExtD3DShaderIntrinsicsSupport_Float8Conversion     = 0x20,
+    AmdExtD3DShaderIntrinsicsSupport_Builtins             = 0x21,
+    AmdExtD3DShaderIntrinsicsSupport_LoadByteAtAddr       = 0x22,
+} AmdExtD3DShaderIntrinsicsSupport;
+
 [
     object,
     uuid(014937ec-9288-446f-a9ac-d75a8e3a984f),
     local
 ]
-interface IAmdExtStub1 : IUnknown
+interface IAmdExtD3DFactory : IUnknown
 {
-    HRESULT QueryInterface2([in, out] void* unk, [in] REFIID iid, [in, out] void** out);
+    HRESULT CreateInterface([in] IUnknown* outer, [in] REFIID iid, [in, out] void** out);
 }
 
 [
@@ -55,9 +108,218 @@ interface IAmdExtStub1 : IUnknown
     uuid(ba019d53-ccab-4cbd-b56a-7230ed4330ad),
     local
 ]
-interface IAmdExtStub2 : IUnknown
+interface IAmdExtD3DShaderIntrinsics : IUnknown
+{
+    HRESULT GetInfo([in, out] AmdExtD3DShaderIntrinsicsInfo *pInfo);
+    HRESULT CheckSupport([in] AmdExtD3DShaderIntrinsicsSupport opcodeSupport);
+    HRESULT Enable();
+}
+
+/* The following were taken from AMD headers */
+
+typedef enum
+{
+    AmdExtD3DStructUnknown,
+    AmdExtD3DStructPipelineState,
+    AmdExtD3DStructPipelineElf,
+    AmdExtD3DStructPipelineCrossCompile
+} AmdExtD3DStructType;
+
+typedef struct
+{
+    AmdExtD3DStructType type;
+    void *pNext;
+} AmdExtD3DCreateInfo;
+
+#define AMD_EXT_DEPTH_BOUNDS_TEST_ENABLE (1 << 0)
+#define AMD_EXT_ABORT_IF_NOT_PIPELINE_CACHED (1 << 1)
+#define AMD_EXT_TOPOLOGY_TYPE_RECTANGLE (1 << 2)
+
+typedef struct
+{
+    ULONG flags;
+} AmdExtD3DPipelineFlags;
+
+typedef struct
+{
+    AmdExtD3DCreateInfo info;
+    AmdExtD3DPipelineFlags flags;
+} AmdExtD3DPipelineCreateInfo;
+
+typedef enum
+{
+    Flags,
+} AmdExtD3DCheckFeatureSupportType;
+
+typedef enum
+{
+    AmdExtD3DPrimitiveTopologyUndefined = 0,
+    AmdExtD3DPrimitiveTopologyRectangleList = 1,
+} AmdExtD3DPrimitiveTopology;
+
+typedef struct
+{
+    USHORT major;
+    USHORT minor;
+} AmdExtD3DGpuRtVersion;
+
+#define AMD_EXT_WMMA_TYPE_FP16 0
+#define AMD_EXT_WMMA_TYPE_FP32 1
+#define AMD_EXT_WMMA_TYPE_FP8 11
+
+typedef struct
+{
+    SIZE_T   mSize;
+    SIZE_T   nSize;
+    SIZE_T   kSize;
+    ULONG    aType;
+    ULONG    bType;
+    ULONG    cType;
+    ULONG    resultType;
+    BOOL     saturatingAccumulation;
+} AmdExtWaveMatrixProperties;
+
+typedef struct
+{
+    AmdExtD3DCreateInfo info;
+    const void *elfBinary;
+    SIZE_T elfSize;
+    struct
+    {
+        ULONG width;
+        ULONG height;
+        ULONG depth;
+    } threadsPerGroup;
+} AmdExtD3DPipelineElfInfo;
+
+typedef struct
+{
+    AmdExtD3DCreateInfo info;
+    const void *blob;
+    SIZE_T blobSize;
+    struct
+    {
+        UINT dimx;
+        UINT dimy;
+        UINT dimz;
+    } threadsPerGroup;
+    ULONG shaderType;
+    const void *options;
+    SIZE_T optionSize;
+    const char *kernelName;
+} AmdExtD3DPipelineCrossCompileInfo;
+
+[
+    object,
+    uuid(E6144584-03DE-439C-9C0B-43AE6D009BC6),
+    local
+]
+interface IAmdExtD3DShaderIntrinsics1 : IAmdExtD3DShaderIntrinsics
+{
+    HRESULT SetExtensionUavBinding([in] UINT registerIndex, [in] UINT registerSpace);
+}
+
+[
+    object,
+    uuid(8104C0FC-7413-410F-8E83-AA617E908648),
+    local
+]
+interface IAmdExtD3DDevice : IUnknown
+{
+    HRESULT CreateGraphicsPipelineState([in] const AmdExtD3DCreateInfo* pAmdExtCreateInfo,
+                                        [in] const D3D12_GRAPHICS_PIPELINE_STATE_DESC *pDesc,
+                                        [in] REFIID iid, [in, out] void **ppPipelineState);
+}
+
+[
+    object,
+    uuid(4BBCAF68-EAF7-4FA4-B653-CB458C334A4E),
+    local
+]
+interface IAmdExtD3DDevice1 : IAmdExtD3DDevice
+{
+    void PushMarker([in] ID3D12GraphicsCommandList *pGfxCmdList, [in] const char *pMarkerData);
+    void PopMarker([in] ID3D12GraphicsCommandList *pGfxCmdList);
+    void SetMarker([in] ID3D12GraphicsCommandList *pGfxCmdList, [in] const char *pMarkerData);
+}
+
+[
+    object,
+    uuid(A7BECF5D-2930-4FDA-8EEE-C797D8A52B7E),
+    local
+]
+interface IAmdExtD3DDevice2 : IAmdExtD3DDevice1
+{
+    HRESULT CheckExtFeatureSupport([in] AmdExtD3DCheckFeatureSupportType featureType,
+                                   [in, out] void *pFeatureData, [in] SIZE_T featureDataSize);
+    HRESULT CreateComputePipelineState([in] const AmdExtD3DCreateInfo* pAmdExtCreateInfo,
+                                       [in] const D3D12_COMPUTE_PIPELINE_STATE_DESC* pDesc,
+                                       [in] REFIID iid, [in, out] void **ppPipelineState);
+}
+
+[
+    object,
+    uuid(397E3533-111E-4A9D-A171-2BAE8EF6CB24),
+    local
+]
+interface IAmdExtD3DDevice3 : IAmdExtD3DDevice2
+{
+    HRESULT CreatePipelineState([in] const AmdExtD3DCreateInfo *pAmdExtCreateInfo,
+                                [in] const D3D12_PIPELINE_STATE_STREAM_DESC* pDesc,
+                                [in] REFIID iid, [in, out] void **ppPipelineState);
+}
+
+[
+    object,
+    uuid(BE9A8C6A-868E-490D-8FBF-29DAC2650F3B),
+    local
+]
+interface IAmdExtD3DDevice4 : IAmdExtD3DDevice3
+{
+    void SetPrimitiveTopology([in] ID3D12GraphicsCommandList *pGfxCmdList, [in] AmdExtD3DPrimitiveTopology topology);
+}
+
+[
+    object,
+    uuid(BDC14598-B7D2-4A8D-9CA5-67848E2AF745),
+    local
+]
+interface IAmdExtD3DDevice5 : IAmdExtD3DDevice4
+{
+    HRESULT CreateComputePipelineFromElf([in] AmdExtD3DPipelineElfInfo *pAmdExtCreateInfo,
+                                         REFIID iid, void **ppPipelineState);
+    void SetKernelArguments([in] ID3D12GraphicsCommandList *pCmdList, [in] ULONG first,
+                            [in] ULONG count, [in] const void *ppValues);
+}
+
+[
+    object,
+    uuid(F764A768-48B4-46A5-9779-928ED6896D2A),
+    local
+]
+interface IAmdExtD3DDevice6 : IAmdExtD3DDevice5
+{
+    void GetGpuRtInterfaceVersion([in, out] AmdExtD3DGpuRtVersion* pInterfaceVersion);
+    void GetGpuRtBinaryVersion([in, out] AmdExtD3DGpuRtVersion* pBinaryVersion);
+}
+
+[
+    object,
+    uuid(FEE37AFC-3C50-4ABF-86CC-1622349B29C0),
+    local
+]
+interface IAmdExtD3DDevice7 : IAmdExtD3DDevice6
+{
+    HRESULT CreateComputePipelineCrossCompile([in] const AmdExtD3DPipelineCrossCompileInfo* pAmdExtCreateInfo,
+                                              [in] REFIID iid, [in, out] void** ppPipelineState);
+}
+
+[
+    object,
+    uuid(F714E11A-B54E-4E0F-ABC5-DF58B18133D1),
+    local
+]
+interface IAmdExtD3DDevice8 : IAmdExtD3DDevice7
 {
-    void stub();
-    void stub2([in] unsigned int unk);
-    void stub3();
+    HRESULT GetWaveMatrixProperties([in, out] SIZE_T *pCount, [in, out] AmdExtWaveMatrixProperties *pProperties);
 }
diff --git a/dlls/amdxc64/main.c b/dlls/amdxc64/main.c
index b4eb97f34a9..8180027ecda 100644
--- a/dlls/amdxc64/main.c
+++ b/dlls/amdxc64/main.c
@@ -110,97 +110,106 @@ static const struct IAmdExtFfxApiVtbl AMDFSR4FFX_vtable = {
     AMDFSR4FFX_UpdateFfxApiProvider
 };
 
-struct AMDExtStub2
+struct AmdExtD3DShaderIntrinsics
 {
-    IAmdExtStub2 IAmdExtStub2_iface;
+    IAmdExtD3DShaderIntrinsics IAmdExtD3DShaderIntrinsics_iface;
     LONG ref;
 };
 
-struct AMDExtStub2* impl_from_IAMDExtStub2(IAmdExtStub2 *iface)
+struct AmdExtD3DShaderIntrinsics* impl_from_IAmdExtD3DShaderIntrinsics(IAmdExtD3DShaderIntrinsics *iface)
 {
-    return CONTAINING_RECORD(iface, struct AMDExtStub2, IAmdExtStub2_iface);
+    return CONTAINING_RECORD(iface, struct AmdExtD3DShaderIntrinsics, IAmdExtD3DShaderIntrinsics_iface);
 }
 
-ULONG STDMETHODCALLTYPE AMDExtStub2_AddRef(IAmdExtStub2 *iface)
+ULONG STDMETHODCALLTYPE AmdExtD3DShaderIntrinsics_AddRef(IAmdExtD3DShaderIntrinsics *iface)
 {
-    struct AMDExtStub2 *this = impl_from_IAMDExtStub2(iface);
+    struct AmdExtD3DShaderIntrinsics *this = impl_from_IAmdExtD3DShaderIntrinsics(iface);
     return InterlockedIncrement(&this->ref);
 }
 
-ULONG STDMETHODCALLTYPE AMDExtStub2_Release(IAmdExtStub2 *iface)
+ULONG STDMETHODCALLTYPE AmdExtD3DShaderIntrinsics_Release(IAmdExtD3DShaderIntrinsics *iface)
 {
-    struct AMDExtStub2 *this = impl_from_IAMDExtStub2(iface);
+    struct AmdExtD3DShaderIntrinsics *this = impl_from_IAmdExtD3DShaderIntrinsics(iface);
     ULONG ret = InterlockedDecrement(&this->ref);
     if (!ret) free(this);
     return ret;
 }
 
-HRESULT STDMETHODCALLTYPE AMDExtStub2_QueryInterface(IAmdExtStub2 *iface, REFIID iid, void **out)
+HRESULT STDMETHODCALLTYPE AmdExtD3DShaderIntrinsics_QueryInterface(IAmdExtD3DShaderIntrinsics *iface, REFIID iid, void **out)
 {
     FIXME("%p %s %p stub!\n", iface, debugstr_guid(iid), out);
     return E_NOINTERFACE;
 }
 
-void STDMETHODCALLTYPE AMDExtStub2_stub1(IAmdExtStub2 *iface)
+HRESULT STDMETHODCALLTYPE AmdExtD3DShaderIntrinsics_GetInfo(IAmdExtD3DShaderIntrinsics *iface,
+                                                            AmdExtD3DShaderIntrinsicsInfo *info)
 {
-    FIXME("%p stub!\n", iface);
+    FIXME("%p %p stub!\n", iface, info);
+    return S_OK;
 }
 
-void STDMETHODCALLTYPE AMDExtStub2_stub2(IAmdExtStub2 *iface, unsigned int unk)
+HRESULT STDMETHODCALLTYPE AmdExtD3DShaderIntrinsics_CheckSupport(IAmdExtD3DShaderIntrinsics *iface,
+                                                                 AmdExtD3DShaderIntrinsicsSupport opcode)
 {
-    FIXME("%p %u stub!\n", iface, unk);
+    if (opcode == AmdExtD3DShaderIntrinsicsSupport_Float8Conversion) return S_OK;
+    if (opcode == AmdExtD3DShaderIntrinsicsSupport_WaveMatrix) return S_OK;
+
+    FIXME("%p %u stub!\n", iface, opcode);
+    return S_OK;
 }
 
-void STDMETHODCALLTYPE AMDExtStub2_stub3(IAmdExtStub2 *iface)
+HRESULT STDMETHODCALLTYPE AmdExtD3DShaderIntrinsics_Enable(IAmdExtD3DShaderIntrinsics *iface)
 {
-    FIXME("%p stub!\n", iface);
+    TRACE("%p\n", iface);
+    /* shader intrinsics are always handled by vkd3d-proton */
+    return S_OK;
 }
 
-const static struct IAmdExtStub2Vtbl AMDSTUB2_vtable = {
-    AMDExtStub2_QueryInterface,
-    AMDExtStub2_AddRef,
-    AMDExtStub2_Release,
-    AMDExtStub2_stub1,
-    AMDExtStub2_stub2,
-    AMDExtStub2_stub3
+const static struct IAmdExtD3DShaderIntrinsicsVtbl AmdExtD3DShaderIntrinsics_vtable = {
+    AmdExtD3DShaderIntrinsics_QueryInterface,
+    AmdExtD3DShaderIntrinsics_AddRef,
+    AmdExtD3DShaderIntrinsics_Release,
+    AmdExtD3DShaderIntrinsics_GetInfo,
+    AmdExtD3DShaderIntrinsics_CheckSupport,
+    AmdExtD3DShaderIntrinsics_Enable
 };
 
-struct AMDExtStub1
+struct AmdExtD3DFactory
 {
-    IAmdExtStub1 IAmdExtStub1_iface;
+    IAmdExtD3DFactory IAmdExtD3DFactory_iface;
     LONG ref;
 };
 
-struct AMDExtStub1* impl_from_IAMDExtStub1(IAmdExtStub1 *iface)
+struct AmdExtD3DFactory* impl_from_IAmdExtD3DFactory(IAmdExtD3DFactory *iface)
 {
-    return CONTAINING_RECORD(iface, struct AMDExtStub1, IAmdExtStub1_iface);
+    return CONTAINING_RECORD(iface, struct AmdExtD3DFactory, IAmdExtD3DFactory_iface);
 }
 
-ULONG STDMETHODCALLTYPE AMDExtStub1_AddRef(IAmdExtStub1 *iface)
+ULONG STDMETHODCALLTYPE AmdExtD3DFactory_AddRef(IAmdExtD3DFactory *iface)
 {
-    struct AMDExtStub1 *this = impl_from_IAMDExtStub1(iface);
+    struct AmdExtD3DFactory *this = impl_from_IAmdExtD3DFactory(iface);
     return InterlockedIncrement(&this->ref);
 }
 
-ULONG STDMETHODCALLTYPE AMDExtStub1_Release(IAmdExtStub1 *iface)
+ULONG STDMETHODCALLTYPE AmdExtD3DFactory_Release(IAmdExtD3DFactory *iface)
 {
-    struct AMDExtStub1 *this = impl_from_IAMDExtStub1(iface);
+    struct AmdExtD3DFactory *this = impl_from_IAmdExtD3DFactory(iface);
     ULONG ret = InterlockedDecrement(&this->ref);
     if (!ret) free(this);
     return ret;
 }
 
-HRESULT STDMETHODCALLTYPE AmdExtStub1_QueryInterface2(IAmdExtStub1 *iface, void* unk, REFIID iid, void **out)
+HRESULT STDMETHODCALLTYPE AmdExtD3DFactory_CreateInterface(IAmdExtD3DFactory *iface, IUnknown *outer, REFIID iid, void **out)
 {
-    TRACE("%p %p %s %p\n", iface, unk, debugstr_guid(iid), out);
+    TRACE("%p %p %s %p\n", iface, outer, debugstr_guid(iid), out);
 
-    if(IsEqualGUID(iid, &IID_IAmdExtStub2))
+    if(IsEqualGUID(iid, &IID_IAmdExtD3DShaderIntrinsics))
     {
-        struct AMDExtStub2 *this = calloc(1, sizeof(struct AMDExtStub2));
+        struct AmdExtD3DShaderIntrinsics *this = calloc(1, sizeof(struct AmdExtD3DShaderIntrinsics));
 
-        this->IAmdExtStub2_iface.lpVtbl = &AMDSTUB2_vtable;
+        this->IAmdExtD3DShaderIntrinsics_iface.lpVtbl = &AmdExtD3DShaderIntrinsics_vtable;
         this->ref = 1;
-        *out = &this->IAmdExtStub2_iface;
+        *out = &this->IAmdExtD3DShaderIntrinsics_iface;
         return S_OK;
     } else {
         FIXME("unknown guid %s\n", debugstr_guid(iid));
@@ -209,16 +218,17 @@ HRESULT STDMETHODCALLTYPE AmdExtStub1_QueryInterface2(IAmdExtStub1 *iface, void*
     return E_NOINTERFACE;
 }
 
-HRESULT STDMETHODCALLTYPE AmdExtStub1_QueryInterface(IAmdExtStub1 *iface, REFIID iid, void **out)
+HRESULT STDMETHODCALLTYPE AmdExtD3DFactory_QueryInterface(IAmdExtD3DFactory *iface, REFIID iid, void **out)
 {
-    return AmdExtStub1_QueryInterface2(iface, NULL, iid, out);
+    TRACE("%p %s %p", iface, debugstr_guid(iid), out);
+    return E_NOINTERFACE;
 }
 
-static const struct IAmdExtStub1Vtbl AMDSTUB1_vtable = {
-    AmdExtStub1_QueryInterface,
-    AMDExtStub1_AddRef,
-    AMDExtStub1_Release,
-    AmdExtStub1_QueryInterface2
+static const struct IAmdExtD3DFactoryVtbl AmdExtD3DFactory_vtable = {
+    AmdExtD3DFactory_QueryInterface,
+    AmdExtD3DFactory_AddRef,
+    AmdExtD3DFactory_Release,
+    AmdExtD3DFactory_CreateInterface
 };
 
 HRESULT CDECL AmdExtD3DCreateInterface(IUnknown *outer, REFIID iid, void **obj)
@@ -234,11 +244,11 @@ HRESULT CDECL AmdExtD3DCreateInterface(IUnknown *outer, REFIID iid, void **obj)
         return S_OK;
     } else if (IsEqualGUID(iid, &IID_IAmdExtAntiLagApi)) {
         return ID3D12Device_QueryInterface((ID3D12Device *)outer, &IID_IAmdExtAntiLagApi, obj);
-    } else if(IsEqualGUID(iid, &IID_IAmdExtStub1)) {
-        struct AMDExtStub1 *this = calloc(1, sizeof(struct AMDExtStub1));
-        this->IAmdExtStub1_iface.lpVtbl = &AMDSTUB1_vtable;
+    } else if(IsEqualGUID(iid, &IID_IAmdExtD3DFactory)) {
+        struct AmdExtD3DFactory *this = calloc(1, sizeof(struct AmdExtD3DFactory));
+        this->IAmdExtD3DFactory_iface.lpVtbl = &AmdExtD3DFactory_vtable;
         this->ref = 1;
-        *obj = &this->IAmdExtStub1_iface;
+        *obj = &this->IAmdExtD3DFactory_iface;
         return S_OK;
     } else {
         FIXME("unknown guid: %s\n", debugstr_guid(iid));
-- 
2.50.1


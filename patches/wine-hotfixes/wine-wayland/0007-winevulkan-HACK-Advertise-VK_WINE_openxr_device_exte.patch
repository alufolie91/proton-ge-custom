From 5caf5f1d31bc71b21a6b957560b5987ebca1d217 Mon Sep 17 00:00:00 2001
From: Paul Gofman <pgofman@codeweavers.com>
Date: Tue, 27 May 2025 12:46:02 -0600
Subject: [PATCH 007/327] winevulkan: HACK: Advertise
 VK_WINE_openxr_device_extensions.

CW-Bug-Id: #25451
---
 dlls/winevulkan/vulkan.c | 37 +++++++++++++++++++++++++++++++++++++
 1 file changed, 37 insertions(+)

diff --git a/dlls/winevulkan/vulkan.c b/dlls/winevulkan/vulkan.c
index 51b59bfabb7..973c6f7ba94 100644
--- a/dlls/winevulkan/vulkan.c
+++ b/dlls/winevulkan/vulkan.c
@@ -423,6 +423,40 @@ static void wine_phys_dev_cleanup(struct wine_phys_dev *phys_dev)
     free(phys_dev->extensions);
 }
 
+static void parse_xr_extensions(struct conversion_context *ctx, const char **extra_extensions, unsigned int *extra_count);
+
+static BOOL is_openxr_extension_supported(VkExtensionProperties *host_prop, uint32_t host_prop_count)
+{
+    unsigned int xr_count = 0, i, j;
+    const char *xr_extensions[64];
+    struct conversion_context ctx;
+
+    if (!getenv("__WINE_OPENXR_VK_DEVICE_EXTENSIONS"))
+    {
+        TRACE("no __WINE_OPENXR_VK_DEVICE_EXTENSIONS.\n");
+        return FALSE;
+    }
+
+    init_conversion_context(&ctx);
+    parse_xr_extensions(&ctx, xr_extensions, &xr_count);
+    for (i = 0; i < xr_count; ++i)
+    {
+        for (j = 0; j < host_prop_count; ++j)
+        {
+            if (!strcmp(host_prop[j].extensionName, xr_extensions[i]))
+                break;
+        }
+        if (j == host_prop_count)
+        {
+            TRACE("no %s.\n", xr_extensions[i]);
+            break;
+        }
+    }
+    free_conversion_context(&ctx);
+    TRACE("supported %d.\n", i == xr_count);
+    return i == xr_count;
+}
+
 static VkResult wine_vk_physical_device_init(struct wine_phys_dev *object, VkPhysicalDevice host_physical_device,
         VkPhysicalDevice client_physical_device, struct vulkan_instance *instance)
 {
@@ -431,6 +465,7 @@ static VkResult wine_vk_physical_device_init(struct wine_phys_dev *object, VkPhy
     VkExtensionProperties *host_properties = NULL;
     VkPhysicalDeviceProperties physdev_properties;
     BOOL have_external_memory_host = FALSE, have_external_memory_fd = FALSE, have_external_semaphore_fd = FALSE;
+    BOOL xr_extensions_supported;
     VkResult res;
     unsigned int i, j;
 
@@ -465,6 +500,8 @@ static VkResult wine_vk_physical_device_init(struct wine_phys_dev *object, VkPhy
         goto err;
     }
 
+    xr_extensions_supported = is_openxr_extension_supported(host_properties, num_host_properties);
+
     /* Count list of extensions for which we have an implementation.
      * TODO: perform translation for platform specific extensions.
      */
-- 
2.51.0


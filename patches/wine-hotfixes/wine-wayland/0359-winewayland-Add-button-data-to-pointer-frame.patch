From 2e0c309c54793c8747c90e72add2b744de1d1dd8 Mon Sep 17 00:00:00 2001
From: Etaash Mathamsetty
 <45927311+Etaash-mathamsetty@users.noreply.github.com>
Date: Fri, 15 Aug 2025 22:26:52 -0400
Subject: [PATCH 359/365] winewayland: Add button data to pointer frame.

---
 dlls/winewayland.drv/wayland_pointer.c | 37 +++++++++++++++-----------
 dlls/winewayland.drv/waylanddrv.h      |  5 +++-
 2 files changed, 26 insertions(+), 16 deletions(-)

diff --git a/dlls/winewayland.drv/wayland_pointer.c b/dlls/winewayland.drv/wayland_pointer.c
index 53473389de6..50275fa7c33 100644
--- a/dlls/winewayland.drv/wayland_pointer.c
+++ b/dlls/winewayland.drv/wayland_pointer.c
@@ -244,49 +244,47 @@ static void pointer_handle_leave(void *data, struct wl_pointer *wl_pointer,
     pthread_mutex_unlock(&pointer->mutex);
 }
 
-static void pointer_handle_button(void *data, struct wl_pointer *wl_pointer,
+static void pointer_handle_button(void *private, struct wl_pointer *wl_pointer,
                                   uint32_t serial, uint32_t time, uint32_t button,
                                   uint32_t state)
 {
     struct wayland_pointer *pointer = &process_wayland.pointer;
-    INPUT input = {0};
+    DWORD flags = 0, data = 0;
     HWND hwnd;
 
     InterlockedExchange(&process_wayland.input_serial, serial);
 
     if (!(hwnd = wayland_pointer_get_focused_hwnd())) return;
-    if (wayland_is_overlay_active()) return;
-
-    input.type = INPUT_MOUSE;
 
     switch (button)
     {
-    case BTN_LEFT: input.mi.dwFlags = MOUSEEVENTF_LEFTDOWN; break;
-    case BTN_RIGHT: input.mi.dwFlags = MOUSEEVENTF_RIGHTDOWN; break;
-    case BTN_MIDDLE: input.mi.dwFlags = MOUSEEVENTF_MIDDLEDOWN; break;
+    case BTN_LEFT: flags = MOUSEEVENTF_LEFTDOWN; break;
+    case BTN_RIGHT: flags = MOUSEEVENTF_RIGHTDOWN; break;
+    case BTN_MIDDLE: flags = MOUSEEVENTF_MIDDLEDOWN; break;
     case BTN_SIDE:
     case BTN_BACK:
-        input.mi.dwFlags = MOUSEEVENTF_XDOWN;
-        input.mi.mouseData = XBUTTON1;
+        flags = MOUSEEVENTF_XDOWN;
+        data = XBUTTON1;
         break;
     case BTN_EXTRA:
     case BTN_FORWARD:
-        input.mi.dwFlags = MOUSEEVENTF_XDOWN;
-        input.mi.mouseData = XBUTTON2;
+        flags = MOUSEEVENTF_XDOWN;
+        data = XBUTTON2;
         break;
     default: break;
     }
 
-    if (state == WL_POINTER_BUTTON_STATE_RELEASED) input.mi.dwFlags <<= 1;
+    if (state == WL_POINTER_BUTTON_STATE_RELEASED) flags <<= 1;
 
     pthread_mutex_lock(&pointer->mutex);
     pointer->button_serial = state == WL_POINTER_BUTTON_STATE_PRESSED ?
                              serial : 0;
+    pointer->pointer_frame.button_data |= data;
+    pointer->pointer_frame.button_flags |= flags;
+    pointer->pointer_frame.flags |= WAYLAND_POINTER_FRAME_BUTTON;
     pthread_mutex_unlock(&pointer->mutex);
 
     TRACE("hwnd=%p button=%#x state=%u\n", hwnd, button, state);
-
-    NtUserSendHardwareInput(hwnd, 0, &input, 0);
 }
 
 static void pointer_handle_axis(void *data, struct wl_pointer *wl_pointer,
@@ -410,6 +408,13 @@ static void pointer_handle_frame(void *data, struct wl_pointer *wl_pointer)
             NtUserSendHardwareInput(hwnd, 0, &input, 0);
     }
 
+    if (pointer->pointer_frame.flags & WAYLAND_POINTER_FRAME_BUTTON)
+    {
+        input.mi.mouseData = pointer->pointer_frame.button_data;
+        input.mi.dwFlags = pointer->pointer_frame.button_flags;
+        NtUserSendHardwareInput(hwnd, 0, &input, 0);
+    }
+
 skip:
     /* reset accumulators when scroll event ends */
     if (pointer->pointer_frame.axis_stop & WAYLAND_POINTER_AXIS_STOP_VERTICAL)
@@ -419,6 +424,8 @@ skip:
 
     /* reset flags */
     pointer->pointer_frame.flags = 0;
+    pointer->pointer_frame.button_flags = 0;
+    pointer->pointer_frame.button_data = 0;
     pointer->pointer_frame.axis_stop = 0;
     InterlockedExchange(&pointer->pointer_frame.discrete_event_handled, FALSE);
 
diff --git a/dlls/winewayland.drv/waylanddrv.h b/dlls/winewayland.drv/waylanddrv.h
index c0394f661a2..5a669583a83 100644
--- a/dlls/winewayland.drv/waylanddrv.h
+++ b/dlls/winewayland.drv/waylanddrv.h
@@ -99,7 +99,8 @@ enum wayland_pointer_frame_flags
     WAYLAND_POINTER_FRAME_ABS = (1 << 0),
     WAYLAND_POINTER_FRAME_REL = (1 << 1),
     WAYLAND_POINTER_FRAME_WHEEL = (1 << 2),
-    WAYLAND_POINTER_FRAME_WHEELH = (1 << 3)
+    WAYLAND_POINTER_FRAME_WHEELH = (1 << 3),
+    WAYLAND_POINTER_FRAME_BUTTON = (1 << 4)
 };
 
 enum wayland_pointer_axis_stop_flags
@@ -148,6 +149,8 @@ struct wayland_pointer
         double wheel, wheelH;
         unsigned int flags;
         unsigned int axis_stop;
+        unsigned int button_flags;
+        unsigned int button_data;
     } pointer_frame;
     pthread_mutex_t mutex;
 };
-- 
2.50.1


From c000de5109b300f7137e9d9c17d966113bd63054 Mon Sep 17 00:00:00 2001
From: Etaash Mathamsetty
 <45927311+Etaash-mathamsetty@users.noreply.github.com>
Date: Wed, 23 Jul 2025 00:34:32 -0400
Subject: [PATCH 201/327] ntoskrnl: Implement PsReferencePrimaryToken.

---
 dlls/ntoskrnl.exe/ntoskrnl.c         | 16 ++++++++++++++++
 dlls/ntoskrnl.exe/ntoskrnl.exe.spec  |  2 +-
 dlls/ntoskrnl.exe/ntoskrnl_private.h |  1 +
 3 files changed, 18 insertions(+), 1 deletion(-)

diff --git a/dlls/ntoskrnl.exe/ntoskrnl.c b/dlls/ntoskrnl.exe/ntoskrnl.c
index 4cb7177199f..092bf854f70 100644
--- a/dlls/ntoskrnl.exe/ntoskrnl.c
+++ b/dlls/ntoskrnl.exe/ntoskrnl.c
@@ -2465,6 +2465,7 @@ NTSTATUS WINAPI FsRtlRegisterUncProvider(PHANDLE MupHandle, PUNICODE_STRING Redi
 static void *create_process_object( HANDLE handle )
 {
     ULONG len;
+    HANDLE token;
     PEPROCESS process;
     ANSI_STRING imageNameA;
     UNICODE_STRING imageNameW, fullImageName;
@@ -2497,6 +2498,10 @@ static void *create_process_object( HANDLE handle )
                                sizeof(fullImageName) + fullImageName.MaximumLength, NULL );
     process->fullImageName = fullImageName;
 
+    NtOpenProcessToken( handle, TOKEN_ALL_ACCESS, &token );
+    ObReferenceObjectByHandle( token, 0, SeTokenObjectType, KernelMode, &process->token, NULL );
+    NtClose(token);
+
     IsWow64Process( handle, &process->wow64 );
 
     return process;
@@ -2506,6 +2511,7 @@ void release_process_object(void *obj)
 {
     PEPROCESS process = obj;
     ExFreePool(process->fullImageName.Buffer);
+    ObDereferenceObject(process->token);
 
     SERVER_START_REQ( release_kernel_object )
     {
@@ -2637,6 +2643,16 @@ const char *WINAPI PsGetProcessImageFileName( PEPROCESS process )
     return process->imageName;
 }
 
+/*********************************************************************
+ *           PsReferencePrimaryToken    (NTOSKRNL.@)
+ */
+PACCESS_TOKEN WINAPI PsReferencePrimaryToken( PEPROCESS process )
+{
+    TRACE("%p -> %p\n", process, process->token);
+    ObReferenceObject(process->token);
+    return process->token;
+}
+
 static void *create_thread_object( HANDLE handle )
 {
     THREAD_BASIC_INFORMATION info;
diff --git a/dlls/ntoskrnl.exe/ntoskrnl.exe.spec b/dlls/ntoskrnl.exe/ntoskrnl.exe.spec
index 2aa1506b90e..683c7703f69 100644
--- a/dlls/ntoskrnl.exe/ntoskrnl.exe.spec
+++ b/dlls/ntoskrnl.exe/ntoskrnl.exe.spec
@@ -959,7 +959,7 @@
 @ stdcall PsLookupThreadByThreadId(ptr ptr)
 @ extern PsProcessType
 @ stub PsReferenceImpersonationToken
-@ stub PsReferencePrimaryToken
+@ stdcall PsReferencePrimaryToken(ptr)
 @ stdcall PsReferenceProcessFilePointer(ptr ptr)
 @ stdcall PsReleaseProcessExitSynchronization(ptr)
 @ stdcall PsRemoveCreateThreadNotifyRoutine(ptr)
diff --git a/dlls/ntoskrnl.exe/ntoskrnl_private.h b/dlls/ntoskrnl.exe/ntoskrnl_private.h
index f75ff74d55c..10aebe722de 100644
--- a/dlls/ntoskrnl.exe/ntoskrnl_private.h
+++ b/dlls/ntoskrnl.exe/ntoskrnl_private.h
@@ -57,6 +57,7 @@ struct _EPROCESS
     KERNEL_USER_TIMES times;
     BOOL wow64;
     ULONG session_id;
+    PACCESS_TOKEN token;
     UNICODE_STRING fullImageName;
     char imageName[15];
 };
-- 
2.51.0


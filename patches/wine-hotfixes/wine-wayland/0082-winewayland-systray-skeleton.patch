From 301a615f10d3ce6affe33909e50c65b0d5cbccde Mon Sep 17 00:00:00 2001
From: Etaash Mathamsetty
 <45927311+Etaash-mathamsetty@users.noreply.github.com>
Date: Sun, 1 Jun 2025 18:57:16 -0400
Subject: [PATCH 082/327] winewayland: systray skeleton

---
 dlls/winewayland.drv/Makefile.in       |   3 +-
 dlls/winewayland.drv/wayland_tray.c    | 101 +++++++++++++++++++++++++
 dlls/winewayland.drv/waylanddrv.h      |   4 +
 dlls/winewayland.drv/waylanddrv_main.c |   4 +
 4 files changed, 111 insertions(+), 1 deletion(-)
 create mode 100644 dlls/winewayland.drv/wayland_tray.c

diff --git a/dlls/winewayland.drv/Makefile.in b/dlls/winewayland.drv/Makefile.in
index 24e8c74f212..f66554e8ef4 100644
--- a/dlls/winewayland.drv/Makefile.in
+++ b/dlls/winewayland.drv/Makefile.in
@@ -1,6 +1,6 @@
 MODULE = winewayland.drv
 UNIXLIB = winewayland.so
-UNIX_CFLAGS = $(EGL_CFLAGS) $(WAYLAND_CLIENT_CFLAGS) $(WAYLAND_EGL_CFLAGS) $(XKBCOMMON_CFLAGS) $(XKBREGISTRY_CFLAGS)
+UNIX_CFLAGS = $(EGL_CFLAGS) $(WAYLAND_CLIENT_CFLAGS) $(WAYLAND_EGL_CFLAGS) $(XKBCOMMON_CFLAGS) $(XKBREGISTRY_CFLAGS) $(DBUS_CFLAGS)
 UNIX_LIBS = -lwin32u $(WAYLAND_CLIENT_LIBS) $(WAYLAND_EGL_LIBS) $(XKBCOMMON_LIBS) $(XKBREGISTRY_LIBS) $(PTHREAD_LIBS) -lm
 IMPORTS = user32 win32u
 
@@ -23,6 +23,7 @@ SOURCES = \
 	wayland_pointer.c \
 	wayland_surface.c \
 	wayland_text_input.c \
+	wayland_tray.c \
 	waylanddrv_main.c \
 	window.c \
 	window_surface.c \
diff --git a/dlls/winewayland.drv/wayland_tray.c b/dlls/winewayland.drv/wayland_tray.c
new file mode 100644
index 00000000000..93e737c6949
--- /dev/null
+++ b/dlls/winewayland.drv/wayland_tray.c
@@ -0,0 +1,101 @@
+/*
+ * Wayland system tray
+ *
+ * Copyright 2025 Etaash Mathamsetty
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
+ */
+
+#if 0
+#pragma makedep unix
+#endif
+
+#include "config.h"
+
+#include <assert.h>
+#include <stdlib.h>
+#include <string.h>
+
+#include "waylanddrv.h"
+#include "wine/debug.h"
+
+#ifdef SONAME_LIBDBUS_1
+#include <dbus/dbus.h>
+#endif
+
+WINE_DEFAULT_DEBUG_CHANNEL(systray);
+
+
+#ifdef SONAME_LIBDBUS_1
+
+
+void WAYLAND_SystrayDockInit(HWND hwnd)
+{
+    TRACE("hwnd %p\n", hwnd);
+}
+
+void WAYLAND_SystrayDockClear(HWND hwnd)
+{
+    TRACE("hwnd %p\n", hwnd);
+}
+
+BOOL WAYLAND_SystrayDockInsert(HWND hwnd, UINT cx, UINT cy, void *icon)
+{
+    TRACE("hwnd %p (cx, cy)=(%u, %u) icon %p\n", hwnd, cx, cy, icon);
+
+    return FALSE;
+}
+
+BOOL WAYLAND_SystrayDockRemove(HWND hwnd)
+{
+    TRACE("hwnd %p\n", hwnd);
+
+    return FALSE;
+}
+
+#else
+
+static int once;
+
+void WAYLAND_SystrayDockInit(HWND hwnd)
+{
+    if (!once++)
+        ERR("dbus support was not compiled in!\n");
+}
+
+void WAYLAND_SystrayDockClear(HWND hwnd)
+{
+    if (!once++)
+        ERR("dbus support was not compiled in!\n");
+}
+
+BOOL WAYLAND_SystrayDockRemove(HWND hwnd)
+{
+    if (!once++)
+        ERR("dbus support was not compiled in!\n");
+
+    return FALSE;
+}
+
+BOOL WAYLAND_SystrayDockInsert(HWND hwnd, UINT cx, UINT cy, void *icon)
+{
+    if (!once++)
+        ERR("dbus support was not compiled in!\n");
+
+    return FALSE;
+}
+
+#endif
+
diff --git a/dlls/winewayland.drv/waylanddrv.h b/dlls/winewayland.drv/waylanddrv.h
index 8bbd14b6784..55b6532c616 100644
--- a/dlls/winewayland.drv/waylanddrv.h
+++ b/dlls/winewayland.drv/waylanddrv.h
@@ -499,6 +499,10 @@ void WAYLAND_WindowPosChanged(HWND hwnd, HWND insert_after, HWND owner_hint, UIN
 BOOL WAYLAND_WindowPosChanging(HWND hwnd, UINT swp_flags, BOOL shaped, const struct window_rects *rects);
 BOOL WAYLAND_CreateWindowSurface(HWND hwnd, BOOL layered, const RECT *surface_rect, struct window_surface **surface);
 BOOL WAYLAND_HasWindowManager(const char *name);
+void WAYLAND_SystrayDockInit(HWND hwnd);
+void WAYLAND_SystrayDockClear(HWND hwnd);
+BOOL WAYLAND_SystrayDockRemove(HWND hwnd);
+BOOL WAYLAND_SystrayDockInsert(HWND hwnd, UINT cx, UINT cy, void *icon);
 UINT WAYLAND_VulkanInit(UINT version, void *vulkan_handle, const struct vulkan_driver_funcs **driver_funcs);
 struct opengl_funcs *WAYLAND_wine_get_wgl_driver(UINT version);
 
diff --git a/dlls/winewayland.drv/waylanddrv_main.c b/dlls/winewayland.drv/waylanddrv_main.c
index 3806d4a74e5..dd9cfa33f48 100644
--- a/dlls/winewayland.drv/waylanddrv_main.c
+++ b/dlls/winewayland.drv/waylanddrv_main.c
@@ -53,6 +53,10 @@ static const struct user_driver_funcs waylanddrv_funcs =
     .pWindowPosChanging = WAYLAND_WindowPosChanging,
     .pCreateWindowSurface = WAYLAND_CreateWindowSurface,
     .pHasWindowManager = WAYLAND_HasWindowManager,
+    .pSystrayDockInit = WAYLAND_SystrayDockInit,
+    .pSystrayDockInsert = WAYLAND_SystrayDockInsert,
+    .pSystrayDockClear = WAYLAND_SystrayDockClear,
+    .pSystrayDockRemove = WAYLAND_SystrayDockRemove,
     .pVulkanInit = WAYLAND_VulkanInit,
     .pwine_get_wgl_driver = WAYLAND_wine_get_wgl_driver,
 };
-- 
2.51.0


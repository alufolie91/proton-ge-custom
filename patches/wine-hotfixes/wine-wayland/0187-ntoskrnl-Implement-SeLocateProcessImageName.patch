From a548d1dcef8f32f95f8f929c1bebf4e67104db09 Mon Sep 17 00:00:00 2001
From: Etaash Mathamsetty
 <45927311+Etaash-mathamsetty@users.noreply.github.com>
Date: Tue, 22 Jul 2025 23:32:46 -0400
Subject: [PATCH 187/336] ntoskrnl: Implement SeLocateProcessImageName.

---
 dlls/ntoskrnl.exe/ntoskrnl.c         | 51 ++++++++++++++++++++++++----
 dlls/ntoskrnl.exe/ntoskrnl_private.h |  3 +-
 2 files changed, 47 insertions(+), 7 deletions(-)

diff --git a/dlls/ntoskrnl.exe/ntoskrnl.c b/dlls/ntoskrnl.exe/ntoskrnl.c
index 13f0ce27bde..4cb7177199f 100644
--- a/dlls/ntoskrnl.exe/ntoskrnl.c
+++ b/dlls/ntoskrnl.exe/ntoskrnl.c
@@ -2464,9 +2464,10 @@ NTSTATUS WINAPI FsRtlRegisterUncProvider(PHANDLE MupHandle, PUNICODE_STRING Redi
 
 static void *create_process_object( HANDLE handle )
 {
+    ULONG len;
     PEPROCESS process;
-    UNICODE_STRING imageNameW;
     ANSI_STRING imageNameA;
+    UNICODE_STRING imageNameW, fullImageName;
 
     if (!(process = alloc_kernel_object( PsProcessType, handle, sizeof(*process), 0 ))) return NULL;
 
@@ -2476,24 +2477,52 @@ static void *create_process_object( HANDLE handle )
     NtQueryInformationProcess( handle, ProcessSessionInformation, &process->session_id, sizeof(process->session_id), NULL );
     NtQueryInformationProcess( handle, ProcessTimes, &process->times, sizeof(process->times), NULL );
 
+    /* get short image name */
     RtlInitUnicodeString(&imageNameW, NULL);
     LdrGetDllFullName(handle, &imageNameW);
+    imageNameW.MaximumLength = imageNameW.Length + sizeof(WCHAR);
+    imageNameW.Buffer = ExAllocatePool(PagedPool, imageNameW.MaximumLength);
+    LdrGetDllFullName(handle, &imageNameW);
     RtlUnicodeStringToAnsiString(&imageNameA, &imageNameW, TRUE);
     memcpy(process->imageName, imageNameA.Buffer, min(sizeof(process->imageName), imageNameA.Length));
     RtlFreeAnsiString(&imageNameA);
-    RtlFreeUnicodeString(&imageNameW);
+    ExFreePool(imageNameW.Buffer);
+
+    /* get full image name */
+    RtlInitUnicodeString(&fullImageName, NULL);
+    NtQueryInformationProcess( handle, ProcessImageFileNameWin32, &fullImageName, sizeof(fullImageName), &len );
+    fullImageName.MaximumLength = len;
+    fullImageName.Buffer = ExAllocatePool(PagedPool, len);
+    NtQueryInformationProcess( handle, ProcessImageFileNameWin32, &fullImageName,
+                               sizeof(fullImageName) + fullImageName.MaximumLength, NULL );
+    process->fullImageName = fullImageName;
 
     IsWow64Process( handle, &process->wow64 );
 
     return process;
 }
 
+void release_process_object(void *obj)
+{
+    PEPROCESS process = obj;
+    ExFreePool(process->fullImageName.Buffer);
+
+    SERVER_START_REQ( release_kernel_object )
+    {
+        req->manager  = wine_server_obj_handle( get_device_manager() );
+        req->user_ptr = wine_server_client_ptr( obj );
+        if (wine_server_call( req )) FIXME( "failed to release %p\n", obj );
+    }
+    SERVER_END_REQ;
+}
+
 static const WCHAR process_type_name[] = {'P','r','o','c','e','s','s',0};
 
 static struct _OBJECT_TYPE process_type =
 {
     process_type_name,
-    create_process_object
+    create_process_object,
+    release_process_object
 };
 
 POBJECT_TYPE PsProcessType = &process_type;
@@ -4460,9 +4489,19 @@ BOOLEAN WINAPI SePrivilegeCheck(PRIVILEGE_SET *privileges, SECURITY_SUBJECT_CONT
  */
 NTSTATUS WINAPI SeLocateProcessImageName(PEPROCESS process, UNICODE_STRING **image_name)
 {
-    FIXME("stub: %p %p\n", process, image_name);
-    if (image_name) *image_name = NULL;
-    return STATUS_NOT_IMPLEMENTED;
+    TRACE("%p %p\n", process, image_name);
+
+    if (!image_name) return STATUS_INVALID_PARAMETER;
+
+    *image_name = ExAllocatePool(PagedPool, sizeof(UNICODE_STRING));
+
+    if (!*image_name) return STATUS_NO_MEMORY;
+
+    **image_name = process->fullImageName;
+
+    TRACE("ret: %s\n", debugstr_us(*image_name));
+
+    return STATUS_SUCCESS;
 }
 
 /*********************************************************************
diff --git a/dlls/ntoskrnl.exe/ntoskrnl_private.h b/dlls/ntoskrnl.exe/ntoskrnl_private.h
index c7bcce2c7e3..f75ff74d55c 100644
--- a/dlls/ntoskrnl.exe/ntoskrnl_private.h
+++ b/dlls/ntoskrnl.exe/ntoskrnl_private.h
@@ -57,7 +57,8 @@ struct _EPROCESS
     KERNEL_USER_TIMES times;
     BOOL wow64;
     ULONG session_id;
-    char imageName[16];
+    UNICODE_STRING fullImageName;
+    char imageName[15];
 };
 
 struct _KTHREAD
-- 
2.51.0


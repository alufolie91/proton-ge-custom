From 80fd6949f2f2883c20847ae807964fc5be2e5afa Mon Sep 17 00:00:00 2001
From: Etaash Mathamsetty
 <45927311+Etaash-mathamsetty@users.noreply.github.com>
Date: Tue, 22 Jul 2025 22:11:36 -0400
Subject: [PATCH 205/341] ntoskrnl: Implement PsGetProcessImageFileName.

---
 dlls/ntoskrnl.exe/ntoskrnl.c         | 19 +++++++++++++++++++
 dlls/ntoskrnl.exe/ntoskrnl.exe.spec  |  2 +-
 dlls/ntoskrnl.exe/ntoskrnl_private.h |  1 +
 3 files changed, 21 insertions(+), 1 deletion(-)

diff --git a/dlls/ntoskrnl.exe/ntoskrnl.c b/dlls/ntoskrnl.exe/ntoskrnl.c
index f39b1a80fae..13f0ce27bde 100644
--- a/dlls/ntoskrnl.exe/ntoskrnl.c
+++ b/dlls/ntoskrnl.exe/ntoskrnl.c
@@ -2465,6 +2465,8 @@ NTSTATUS WINAPI FsRtlRegisterUncProvider(PHANDLE MupHandle, PUNICODE_STRING Redi
 static void *create_process_object( HANDLE handle )
 {
     PEPROCESS process;
+    UNICODE_STRING imageNameW;
+    ANSI_STRING imageNameA;
 
     if (!(process = alloc_kernel_object( PsProcessType, handle, sizeof(*process), 0 ))) return NULL;
 
@@ -2473,6 +2475,14 @@ static void *create_process_object( HANDLE handle )
     NtQueryInformationProcess( handle, ProcessBasicInformation, &process->info, sizeof(process->info), NULL );
     NtQueryInformationProcess( handle, ProcessSessionInformation, &process->session_id, sizeof(process->session_id), NULL );
     NtQueryInformationProcess( handle, ProcessTimes, &process->times, sizeof(process->times), NULL );
+
+    RtlInitUnicodeString(&imageNameW, NULL);
+    LdrGetDllFullName(handle, &imageNameW);
+    RtlUnicodeStringToAnsiString(&imageNameA, &imageNameW, TRUE);
+    memcpy(process->imageName, imageNameA.Buffer, min(sizeof(process->imageName), imageNameA.Length));
+    RtlFreeAnsiString(&imageNameA);
+    RtlFreeUnicodeString(&imageNameW);
+
     IsWow64Process( handle, &process->wow64 );
 
     return process;
@@ -2589,6 +2599,15 @@ BOOL WINAPI PsGetProcessExitProcessCalled( PEPROCESS process )
     return PsGetProcessExitStatus(process) != STATUS_PENDING;
 }
 
+/*********************************************************************
+ *           PsGetProcessImageFileName    (NTOSKRNL.@)
+ */
+const char *WINAPI PsGetProcessImageFileName( PEPROCESS process )
+{
+    TRACE("%p -> %s\n", process, debugstr_an(process->imageName, sizeof(process->imageName)));
+    return process->imageName;
+}
+
 static void *create_thread_object( HANDLE handle )
 {
     THREAD_BASIC_INFORMATION info;
diff --git a/dlls/ntoskrnl.exe/ntoskrnl.exe.spec b/dlls/ntoskrnl.exe/ntoskrnl.exe.spec
index e893042adec..2aa1506b90e 100644
--- a/dlls/ntoskrnl.exe/ntoskrnl.exe.spec
+++ b/dlls/ntoskrnl.exe/ntoskrnl.exe.spec
@@ -927,7 +927,7 @@
 @ stdcall PsGetProcessExitStatus(ptr)
 @ stub PsGetProcessExitTime
 @ stdcall PsGetProcessId(ptr)
-@ stub PsGetProcessImageFileName
+@ stdcall PsGetProcessImageFileName(ptr)
 @ stdcall PsGetProcessInheritedFromUniqueProcessId(ptr)
 @ stub PsGetProcessJob
 @ stdcall PsGetProcessPeb(ptr)
diff --git a/dlls/ntoskrnl.exe/ntoskrnl_private.h b/dlls/ntoskrnl.exe/ntoskrnl_private.h
index a1f07a75dcd..c7bcce2c7e3 100644
--- a/dlls/ntoskrnl.exe/ntoskrnl_private.h
+++ b/dlls/ntoskrnl.exe/ntoskrnl_private.h
@@ -57,6 +57,7 @@ struct _EPROCESS
     KERNEL_USER_TIMES times;
     BOOL wow64;
     ULONG session_id;
+    char imageName[16];
 };
 
 struct _KTHREAD
-- 
2.50.1


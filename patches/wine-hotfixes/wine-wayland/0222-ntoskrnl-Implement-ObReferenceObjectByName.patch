From cfe410bd4d5eecea57b99c8b44b20ad97321256d Mon Sep 17 00:00:00 2001
From: Etaash Mathamsetty
 <45927311+Etaash-mathamsetty@users.noreply.github.com>
Date: Thu, 24 Jul 2025 17:42:00 -0400
Subject: [PATCH 222/341] ntoskrnl: Implement ObReferenceObjectByName.

---
 dlls/ntoskrnl.exe/ntoskrnl.c   | 34 +++++++++++++++++++++++++++++-----
 dlls/ntoskrnl.exe/pnp.c        |  2 +-
 include/wine/server_protocol.h | 21 ++++++++++++++++++++-
 server/device.c                | 28 ++++++++++++++++++++++++++++
 server/protocol.def            | 11 +++++++++++
 server/request_handlers.h      |  8 ++++++++
 server/request_trace.h         | 16 ++++++++++++++++
 7 files changed, 113 insertions(+), 7 deletions(-)

diff --git a/dlls/ntoskrnl.exe/ntoskrnl.c b/dlls/ntoskrnl.exe/ntoskrnl.c
index ae83f9fd4ec..96065453881 100644
--- a/dlls/ntoskrnl.exe/ntoskrnl.c
+++ b/dlls/ntoskrnl.exe/ntoskrnl.c
@@ -3250,10 +3250,11 @@ NTSTATUS WINAPI ObReferenceObjectByName( UNICODE_STRING *ObjectName,
                                          void *ParseContext,
                                          void **Object)
 {
+    NTSTATUS ret = STATUS_SUCCESS;
     struct wine_driver *driver;
     struct wine_rb_entry *entry;
 
-    TRACE("mostly-stub:%s %li %p %li %p %i %p %p\n", debugstr_us(ObjectName),
+    TRACE("%s %li %p %li %p %i %p %p\n", debugstr_us(ObjectName),
         Attributes, AccessState, DesiredAccess, ObjectType, AccessMode,
         ParseContext, Object);
 
@@ -3267,6 +3268,10 @@ NTSTATUS WINAPI ObReferenceObjectByName( UNICODE_STRING *ObjectName,
         return STATUS_NOT_IMPLEMENTED;
     }
 
+    if (!ObjectType || !Object || !ObjectName) return STATUS_INVALID_PARAMETER;
+
+    *Object = NULL;
+
     if (!RtlCompareUnicodeString(&ObjectType->name, &IoDriverObjectType->name, FALSE))
     {
         EnterCriticalSection(&drivers_cs);
@@ -3275,17 +3280,36 @@ NTSTATUS WINAPI ObReferenceObjectByName( UNICODE_STRING *ObjectName,
         if (!entry)
         {
             FIXME("Object (%s) not found, may not be tracked.\n", debugstr_us(ObjectName));
-            return STATUS_NOT_IMPLEMENTED;
+            return STATUS_NOT_FOUND;
         }
 
         driver = WINE_RB_ENTRY_VALUE(entry, struct wine_driver, entry);
         ObReferenceObject( *Object = &driver->driver_obj );
     } else {
-        FIXME("Unhandled ObjectType\n");
-        return STATUS_NOT_IMPLEMENTED;
+
+        SERVER_START_REQ(get_kernel_object_name)
+        {
+            req->manager = wine_server_obj_handle( get_device_manager() );
+            req->attributes = Attributes;
+            req->rootdir = 0;
+            wine_server_add_data(req, ObjectName->Buffer, ObjectName->Length);
+            if (!(ret = wine_server_call( req )))
+                *Object = wine_server_get_ptr( reply->user_ptr );
+        }
+        SERVER_END_REQ;
+
+        if (*Object)
+        {
+            if (ObGetObjectType( *Object ) != ObjectType)
+                ret = STATUS_OBJECT_TYPE_MISMATCH;
+            else
+                ObReferenceObject( *Object );
+        }
+
+        FIXME("ret %p %lx\n", *Object, ret);
     }
 
-    return STATUS_SUCCESS;
+    return ret;
 }
 
 
diff --git a/dlls/ntoskrnl.exe/pnp.c b/dlls/ntoskrnl.exe/pnp.c
index 56117628f8b..8535b5aaa1d 100644
--- a/dlls/ntoskrnl.exe/pnp.c
+++ b/dlls/ntoskrnl.exe/pnp.c
@@ -205,7 +205,7 @@ static void load_function_driver( DEVICE_OBJECT *device, HDEVINFO set, SP_DEVINF
     lstrcatW( buffer, driver );
     RtlInitUnicodeString( &string, buffer );
     if (ObReferenceObjectByName( &string, OBJ_CASE_INSENSITIVE, NULL,
-                                 0, NULL, KernelMode, NULL, (void **)&driver_obj ) != STATUS_SUCCESS)
+                                 0, IoDriverObjectType, KernelMode, NULL, (void **)&driver_obj ) != STATUS_SUCCESS)
     {
         ERR("Failed to locate loaded driver %s.\n", debugstr_w(driver));
         return;
diff --git a/include/wine/server_protocol.h b/include/wine/server_protocol.h
index 2fe15d62803..07987120bcf 100644
--- a/include/wine/server_protocol.h
+++ b/include/wine/server_protocol.h
@@ -5403,6 +5403,22 @@ struct get_kernel_object_handle_reply
 
 
 
+struct get_kernel_object_name_request
+{
+    struct request_header __header;
+    obj_handle_t rootdir;
+    obj_handle_t manager;
+    unsigned int attributes;
+    /* VARARG(name,unicode_str); */
+};
+struct get_kernel_object_name_reply
+{
+    struct reply_header __header;
+    client_ptr_t user_ptr;
+};
+
+
+
 struct make_process_system_request
 {
     struct request_header __header;
@@ -6476,6 +6492,7 @@ enum request
     REQ_grab_kernel_object,
     REQ_release_kernel_object,
     REQ_get_kernel_object_handle,
+    REQ_get_kernel_object_name,
     REQ_make_process_system,
     REQ_grant_process_admin_token,
     REQ_get_token_info,
@@ -6794,6 +6811,7 @@ union generic_request
     struct grab_kernel_object_request grab_kernel_object_request;
     struct release_kernel_object_request release_kernel_object_request;
     struct get_kernel_object_handle_request get_kernel_object_handle_request;
+    struct get_kernel_object_name_request get_kernel_object_name_request;
     struct make_process_system_request make_process_system_request;
     struct grant_process_admin_token_request grant_process_admin_token_request;
     struct get_token_info_request get_token_info_request;
@@ -7110,6 +7128,7 @@ union generic_reply
     struct grab_kernel_object_reply grab_kernel_object_reply;
     struct release_kernel_object_reply release_kernel_object_reply;
     struct get_kernel_object_handle_reply get_kernel_object_handle_reply;
+    struct get_kernel_object_name_reply get_kernel_object_name_reply;
     struct make_process_system_reply make_process_system_reply;
     struct grant_process_admin_token_reply grant_process_admin_token_reply;
     struct get_token_info_reply get_token_info_reply;
@@ -7164,6 +7183,6 @@ union generic_reply
     struct get_inproc_alert_event_reply get_inproc_alert_event_reply;
 };
 
-#define SERVER_PROTOCOL_VERSION 861
+#define SERVER_PROTOCOL_VERSION 862
 
 #endif /* __WINE_WINE_SERVER_PROTOCOL_H */
diff --git a/server/device.c b/server/device.c
index d8f00369c41..74a94f10a9e 100644
--- a/server/device.c
+++ b/server/device.c
@@ -1229,3 +1229,31 @@ DECL_HANDLER(get_kernel_object_handle)
 
     release_object( manager );
 }
+
+
+/* get kernel object from object name */
+DECL_HANDLER(get_kernel_object_name)
+{
+    struct device_manager *manager;
+    struct object *obj, *root = NULL;
+    struct unicode_str temp, name = get_req_unicode_str();
+
+    if (!(manager = (struct device_manager *)get_handle_obj( current->process, req->manager,
+        0, &device_manager_ops )))
+        return;
+
+    if (req->rootdir && !(root = get_directory_obj( current->process, req->rootdir )))
+    {
+        release_object( manager );
+        return;
+    }
+
+    if ((obj = lookup_named_object( root, &name, req->attributes, &temp )))
+    {
+        reply->user_ptr = get_kernel_object_ptr( manager, obj );
+        release_object( obj );
+    }
+    else set_error( STATUS_NOT_FOUND );
+
+    release_object( manager );
+}
diff --git a/server/protocol.def b/server/protocol.def
index 1c93066b6d8..6dc375021cd 100644
--- a/server/protocol.def
+++ b/server/protocol.def
@@ -3811,6 +3811,17 @@ struct handle_info
 @END
 
 
+/* Get kernel pointer from object name */
+@REQ(get_kernel_object_name)
+    obj_handle_t rootdir;         /* root directory */
+    obj_handle_t manager;         /* handle to the device manager */
+    unsigned int attributes;      /* object attributes */
+    VARARG(name,unicode_str);     /* object name */
+@REPLY
+    client_ptr_t user_ptr;        /* kernel object pointer */
+@END
+
+
 /* Make the current process a system process */
 @REQ(make_process_system)
     obj_handle_t handle;          /* handle to the process */
diff --git a/server/request_handlers.h b/server/request_handlers.h
index 28fb4b2df34..b4a801c8b92 100644
--- a/server/request_handlers.h
+++ b/server/request_handlers.h
@@ -266,6 +266,7 @@ DECL_HANDLER(set_kernel_object_ptr);
 DECL_HANDLER(grab_kernel_object);
 DECL_HANDLER(release_kernel_object);
 DECL_HANDLER(get_kernel_object_handle);
+DECL_HANDLER(get_kernel_object_name);
 DECL_HANDLER(make_process_system);
 DECL_HANDLER(grant_process_admin_token);
 DECL_HANDLER(get_token_info);
@@ -581,6 +582,7 @@ static const req_handler req_handlers[REQ_NB_REQUESTS] =
     (req_handler)req_grab_kernel_object,
     (req_handler)req_release_kernel_object,
     (req_handler)req_get_kernel_object_handle,
+    (req_handler)req_get_kernel_object_name,
     (req_handler)req_make_process_system,
     (req_handler)req_grant_process_admin_token,
     (req_handler)req_get_token_info,
@@ -2158,6 +2160,12 @@ C_ASSERT( offsetof(struct get_kernel_object_handle_request, access) == 24 );
 C_ASSERT( sizeof(struct get_kernel_object_handle_request) == 32 );
 C_ASSERT( offsetof(struct get_kernel_object_handle_reply, handle) == 8 );
 C_ASSERT( sizeof(struct get_kernel_object_handle_reply) == 16 );
+C_ASSERT( offsetof(struct get_kernel_object_name_request, rootdir) == 12 );
+C_ASSERT( offsetof(struct get_kernel_object_name_request, manager) == 16 );
+C_ASSERT( offsetof(struct get_kernel_object_name_request, attributes) == 20 );
+C_ASSERT( sizeof(struct get_kernel_object_name_request) == 24 );
+C_ASSERT( offsetof(struct get_kernel_object_name_reply, user_ptr) == 8 );
+C_ASSERT( sizeof(struct get_kernel_object_name_reply) == 16 );
 C_ASSERT( offsetof(struct make_process_system_request, handle) == 12 );
 C_ASSERT( offsetof(struct make_process_system_request, desktop_close_timeout) == 16 );
 C_ASSERT( sizeof(struct make_process_system_request) == 24 );
diff --git a/server/request_trace.h b/server/request_trace.h
index b70342f9581..64dd9864f29 100644
--- a/server/request_trace.h
+++ b/server/request_trace.h
@@ -3049,6 +3049,19 @@ static void dump_get_kernel_object_handle_reply( const struct get_kernel_object_
     fprintf( stderr, " handle=%04x", req->handle );
 }
 
+static void dump_get_kernel_object_name_request( const struct get_kernel_object_name_request *req )
+{
+    fprintf( stderr, " rootdir=%04x", req->rootdir );
+    fprintf( stderr, ", manager=%04x", req->manager );
+    fprintf( stderr, ", attributes=%08x", req->attributes );
+    dump_varargs_unicode_str( ", name=", cur_size );
+}
+
+static void dump_get_kernel_object_name_reply( const struct get_kernel_object_name_reply *req )
+{
+    dump_uint64( " user_ptr=", &req->user_ptr );
+}
+
 static void dump_make_process_system_request( const struct make_process_system_request *req )
 {
     fprintf( stderr, " handle=%04x", req->handle );
@@ -3806,6 +3819,7 @@ static const dump_func req_dumpers[REQ_NB_REQUESTS] =
     (dump_func)dump_grab_kernel_object_request,
     (dump_func)dump_release_kernel_object_request,
     (dump_func)dump_get_kernel_object_handle_request,
+    (dump_func)dump_get_kernel_object_name_request,
     (dump_func)dump_make_process_system_request,
     (dump_func)dump_grant_process_admin_token_request,
     (dump_func)dump_get_token_info_request,
@@ -4121,6 +4135,7 @@ static const dump_func reply_dumpers[REQ_NB_REQUESTS] =
     NULL,
     NULL,
     (dump_func)dump_get_kernel_object_handle_reply,
+    (dump_func)dump_get_kernel_object_name_reply,
     (dump_func)dump_make_process_system_reply,
     NULL,
     (dump_func)dump_get_token_info_reply,
@@ -4436,6 +4451,7 @@ static const char * const req_names[REQ_NB_REQUESTS] =
     "grab_kernel_object",
     "release_kernel_object",
     "get_kernel_object_handle",
+    "get_kernel_object_name",
     "make_process_system",
     "grant_process_admin_token",
     "get_token_info",
-- 
2.50.1


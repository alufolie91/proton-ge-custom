From 13bdf0836a3a9b0f00b0f2ba541cf106f1e3f149 Mon Sep 17 00:00:00 2001
From: Yuxuan Shui <yshui@codeweavers.com>
Date: Mon, 14 Jul 2025 14:43:14 +0100
Subject: [PATCH 370/441] ntdll: Also restore rbp before calling user mode
 callback.

If wine dlls are built with frame pointers enabled, the frame pointer will be
used during unwinding.

If we don't restore frame pointer before calling the user mode callback, then
later when the unwinder encounters the user mode callback frame, it will set
the frame pointer to something unexpected (depends on what it was during
`call_user_mode_callback`). Then for the subsequent frame it adjusts the stack
pointer based on the frame pointer, thus derailing the unwinding process.
---
 dlls/ntdll/tests/exception.c    |  2 --
 dlls/ntdll/unix/signal_x86_64.c | 21 ++++++++++++++-------
 2 files changed, 14 insertions(+), 9 deletions(-)

diff --git a/dlls/ntdll/tests/exception.c b/dlls/ntdll/tests/exception.c
index a90a5a75f36..f1694cf6e6e 100644
--- a/dlls/ntdll/tests/exception.c
+++ b/dlls/ntdll/tests/exception.c
@@ -6063,14 +6063,12 @@ static LRESULT unwinding_wnd_proc(HWND w, UINT msg, WPARAM p2, LPARAM p3)
                 found = TRUE;
 
                 /* check that non-volatile registers are set properly before entering user callback. */
-                todo_wine {
                 ok(!context.Rbx, "unexpected register value, %%rbx = %#I64x\n", context.Rbx);
                 ok(!context.R12, "unexpected register value, %%r12 = %#I64x\n", context.R12);
                 ok(!context.R13, "unexpected register value, %%r13 = %#I64x\n", context.R13);
                 ok(!context.R14, "unexpected register value, %%r14 = %#I64x\n", context.R14);
                 ok(!context.R15, "unexpected register value, %%r15 = %#I64x\n", context.R15);
                 ok(context.Rbp == 0xdeadbeef, "unexpected register value, %%rbp = %#I64x\n", context.Rbp);
-                }
                 break;
             }
         }
diff --git a/dlls/ntdll/unix/signal_x86_64.c b/dlls/ntdll/unix/signal_x86_64.c
index 9222c17aae9..60d1fd341d9 100644
--- a/dlls/ntdll/unix/signal_x86_64.c
+++ b/dlls/ntdll/unix/signal_x86_64.c
@@ -1684,17 +1684,18 @@ __ASM_GLOBAL_FUNC( call_user_mode_callback,
                    "movq %rax,0xa8(%rsp)\n\t"  /* frame->syscall_cfa */
                    "movw %cs,0x78(%rsp)\n\t"   /* frame->cs */
                    "movw %ss,0x90(%rsp)\n\t"   /* frame->ss */
-                   "movq 0x378(%r8),%r10\n\t"  /* thread_data->syscall_frame */
+                   "movq 0x378(%r8),%r14\n\t"  /* thread_data->syscall_frame */
                    "movq (%r8),%rax\n\t"       /* NtCurrentTeb()->Tib.ExceptionList */
                    "movq %rax,0x300(%rsp,%rsi)\n\t"
-                   "movl 0xb0(%r10),%r14d\n\t" /* prev_frame->syscall_flags */
-                   "movl %r14d,0xb0(%rsp)\n\t" /* frame->syscall_flags */
-                   "movq %r10,0xa0(%rsp)\n\t"  /* frame->prev_frame */
+                   "movl 0xb0(%r14),%r10d\n\t" /* prev_frame->syscall_flags */
+                   "movl %r10d,0xb0(%rsp)\n\t" /* frame->syscall_flags */
+                   "movq %r14,0xa0(%rsp)\n\t"  /* frame->prev_frame */
                    "movq %rsp,0x378(%r8)\n\t"  /* thread_data->syscall_frame */
                    /* switch to user stack */
                    "movq %rdi,%rsp\n\t"        /* user_rsp */
+                   "movq 0x98(%r14),%rbp\n\t"  /* prev_frame->rbp */
 #ifdef __linux__
-                   "testl $4,%r14d\n\t"        /* SYSCALL_HAVE_PTHREAD_TEB */
+                   "testl $4,%r10d\n\t"        /* SYSCALL_HAVE_PTHREAD_TEB */
                    "jz 1f\n\t"
                    "movw 0x338(%r8),%fs\n"     /* amd64_thread_data()->fs */
                    "1:\n\t"
@@ -1710,8 +1711,14 @@ __ASM_GLOBAL_FUNC( call_user_mode_callback,
                    "movq (%r10),%r10\n\t"
                    "test %r10,%r10\n\t"
                    "jz 1f\n\t"
-                   "xchgq %rcx,%r10\n\t"
-                   "1\t:jmpq *%rcx" )          /* func */
+                   "xchgq %rcx,%r10\n"
+                   "1:\n\t"
+                   "xor %rbx,%rbx\n\t"
+                   "xor %r12,%r12\n\t"
+                   "xor %r13,%r13\n\t"
+                   "xor %r14,%r14\n\t"
+                   "xor %r15,%r15\n\t"
+                   "jmpq *%rcx" )          /* func */
 
 
 /***********************************************************************
-- 
2.51.0


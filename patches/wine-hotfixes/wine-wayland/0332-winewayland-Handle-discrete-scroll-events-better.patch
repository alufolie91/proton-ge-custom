From 13be8092ab506305cbc61331b6b9a7f8fd5eccee Mon Sep 17 00:00:00 2001
From: Etaash Mathamsetty
 <45927311+Etaash-mathamsetty@users.noreply.github.com>
Date: Wed, 10 Sep 2025 00:59:16 -0500
Subject: [PATCH 332/336] winewayland: Handle discrete scroll events better.

---
 dlls/winewayland.drv/wayland_pointer.c | 37 ++++++++++++++++++--------
 dlls/winewayland.drv/waylanddrv.h      |  5 +++-
 2 files changed, 30 insertions(+), 12 deletions(-)

diff --git a/dlls/winewayland.drv/wayland_pointer.c b/dlls/winewayland.drv/wayland_pointer.c
index e904cb57946..bd1c19485fd 100644
--- a/dlls/winewayland.drv/wayland_pointer.c
+++ b/dlls/winewayland.drv/wayland_pointer.c
@@ -317,7 +317,6 @@ static void pointer_handle_axis(void *data, struct wl_pointer *wl_pointer,
     struct wayland_pointer *pointer = &process_wayland.pointer;
 
     if (!(hwnd = wayland_pointer_get_focused_hwnd())) return;
-    if (InterlockedCompareExchange(&pointer->pointer_frame.discrete_event_handled, FALSE, TRUE)) return;
 
     pthread_mutex_lock(&pointer->mutex);
 
@@ -333,11 +332,15 @@ static void pointer_handle_axis(void *data, struct wl_pointer *wl_pointer,
     switch (axis)
     {
         case WL_POINTER_AXIS_VERTICAL_SCROLL:
+            if (pointer->pointer_frame.flags & WAYLAND_POINTER_FRAME_WHEELD)
+                break;
             pointer->pointer_frame.wheel -= scroll_value;
             pointer->pointer_frame.flags |= WAYLAND_POINTER_FRAME_WHEEL;
             break;
         case WL_POINTER_AXIS_HORIZONTAL_SCROLL:
-            pointer->pointer_frame.wheel += scroll_value;
+            if (pointer->pointer_frame.flags & WAYLAND_POINTER_FRAME_WHEELDH)
+                break;
+            pointer->pointer_frame.wheelH += scroll_value;
             pointer->pointer_frame.flags |= WAYLAND_POINTER_FRAME_WHEELH;
             break;
         default: break;
@@ -381,6 +384,8 @@ static void pointer_handle_frame(void *data, struct wl_pointer *wl_pointer)
     /*
      * Always send raw input
      * FIXME: is this correct behavior?
+     * A: The value is probably correct but the way
+     * the input is sent is not quite right
     */
     if (pointer->pointer_frame.flags & WAYLAND_POINTER_FRAME_REL) {
         input.mi.dx = round(pointer->pointer_frame.dx);
@@ -399,7 +404,14 @@ static void pointer_handle_frame(void *data, struct wl_pointer *wl_pointer)
     input.mi.dx = 0;
     input.mi.dy = 0;
 
-    if (pointer->pointer_frame.flags & WAYLAND_POINTER_FRAME_WHEEL)
+    /* handle discrete events seperately */
+    if (pointer->pointer_frame.flags & WAYLAND_POINTER_FRAME_WHEELD)
+    {
+        input.mi.mouseData = pointer->pointer_frame.wheelD;
+        input.mi.dwFlags = MOUSEEVENTF_WHEEL;
+        if (input.mi.mouseData)
+            NtUserSendHardwareInput(hwnd, 0, &input, 0);
+    } else if (pointer->pointer_frame.flags & WAYLAND_POINTER_FRAME_WHEEL)
     {
         input.mi.mouseData = trunc(pointer->pointer_frame.wheel / WHEEL_DELTA) * WHEEL_DELTA;
         pointer->pointer_frame.wheel -= (int)input.mi.mouseData;
@@ -408,7 +420,13 @@ static void pointer_handle_frame(void *data, struct wl_pointer *wl_pointer)
             NtUserSendHardwareInput(hwnd, 0, &input, 0);
     }
 
-    if (pointer->pointer_frame.flags & WAYLAND_POINTER_FRAME_WHEELH)
+    if (pointer->pointer_frame.flags & WAYLAND_POINTER_FRAME_WHEELDH)
+    {
+        input.mi.mouseData = pointer->pointer_frame.wheelDH;
+        input.mi.dwFlags = MOUSEEVENTF_HWHEEL;
+        if (input.mi.mouseData)
+            NtUserSendHardwareInput(hwnd, 0, &input, 0);
+    } else if (pointer->pointer_frame.flags & WAYLAND_POINTER_FRAME_WHEELH)
     {
         input.mi.mouseData = trunc(pointer->pointer_frame.wheelH / WHEEL_DELTA) * WHEEL_DELTA;
         pointer->pointer_frame.wheelH -= (int)input.mi.mouseData;
@@ -427,7 +445,6 @@ skip:
     /* reset flags */
     pointer->pointer_frame.flags = 0;
     pointer->pointer_frame.axis_stop = 0;
-    InterlockedExchange(&pointer->pointer_frame.discrete_event_handled, FALSE);
 
     pthread_mutex_unlock(&pointer->mutex);
 }
@@ -465,19 +482,17 @@ static void pointer_handle_axis_discrete(void *data, struct wl_pointer *wl_point
 
     if (!(hwnd = wayland_pointer_get_focused_hwnd())) return;
 
-    InterlockedExchange(&pointer->pointer_frame.discrete_event_handled, TRUE);
-
     pthread_mutex_lock(&pointer->mutex);
 
     switch (axis)
     {
         case WL_POINTER_AXIS_VERTICAL_SCROLL:
-            pointer->pointer_frame.wheel = -WHEEL_DELTA * discrete;
-            pointer->pointer_frame.flags |= WAYLAND_POINTER_FRAME_WHEEL;
+            pointer->pointer_frame.wheelD = -WHEEL_DELTA * discrete;
+            pointer->pointer_frame.flags |= WAYLAND_POINTER_FRAME_WHEELD;
             break;
         case WL_POINTER_AXIS_HORIZONTAL_SCROLL:
-            pointer->pointer_frame.wheelH = WHEEL_DELTA * discrete;
-            pointer->pointer_frame.flags |= WAYLAND_POINTER_FRAME_WHEELH;
+            pointer->pointer_frame.wheelDH = WHEEL_DELTA * discrete;
+            pointer->pointer_frame.flags |= WAYLAND_POINTER_FRAME_WHEELDH;
             break;
         default: break;
     }
diff --git a/dlls/winewayland.drv/waylanddrv.h b/dlls/winewayland.drv/waylanddrv.h
index eb07bfa104b..52626dda20f 100644
--- a/dlls/winewayland.drv/waylanddrv.h
+++ b/dlls/winewayland.drv/waylanddrv.h
@@ -97,7 +97,9 @@ enum wayland_pointer_frame_flags
     WAYLAND_POINTER_FRAME_ABS = (1 << 0),
     WAYLAND_POINTER_FRAME_REL = (1 << 1),
     WAYLAND_POINTER_FRAME_WHEEL = (1 << 2),
-    WAYLAND_POINTER_FRAME_WHEELH = (1 << 3)
+    WAYLAND_POINTER_FRAME_WHEELH = (1 << 3),
+    WAYLAND_POINTER_FRAME_WHEELD = (1 << 4),
+    WAYLAND_POINTER_FRAME_WHEELDH = (1 << 5)
 };
 
 enum wayland_pointer_axis_stop_flags
@@ -144,6 +146,7 @@ struct wayland_pointer
         int x, y;
         double dx, dy;
         double wheel, wheelH;
+        double wheelD, wheelDH;
         unsigned int flags;
         unsigned int axis_stop;
     } pointer_frame;
-- 
2.51.0


From f5206323b13276e0e736a54d27eff2e5e727d171 Mon Sep 17 00:00:00 2001
From: Etaash Mathamsetty
 <45927311+Etaash-mathamsetty@users.noreply.github.com>
Date: Mon, 13 Oct 2025 13:04:52 -0500
Subject: [PATCH 332/378] winewayland: Implement wp_pointer_warp_v1.

Remove the pointer frame drop hack
---
 dlls/winewayland.drv/Makefile.in         |  1 +
 dlls/winewayland.drv/pointer-warp-v1.xml | 72 ++++++++++++++++++++++++
 dlls/winewayland.drv/wayland.c           |  5 ++
 dlls/winewayland.drv/wayland_pointer.c   | 33 +++++++----
 dlls/winewayland.drv/waylanddrv.h        |  3 +-
 5 files changed, 102 insertions(+), 12 deletions(-)
 create mode 100644 dlls/winewayland.drv/pointer-warp-v1.xml

diff --git a/dlls/winewayland.drv/Makefile.in b/dlls/winewayland.drv/Makefile.in
index 81bff89e0ed..a44add4415d 100644
--- a/dlls/winewayland.drv/Makefile.in
+++ b/dlls/winewayland.drv/Makefile.in
@@ -14,6 +14,7 @@ SOURCES = \
 	linux-dmabuf-v1.xml \
 	opengl.c \
 	pointer-constraints-unstable-v1.xml \
+	pointer-warp-v1.xml \
 	relative-pointer-unstable-v1.xml \
 	text-input-unstable-v3.xml \
 	version.rc \
diff --git a/dlls/winewayland.drv/pointer-warp-v1.xml b/dlls/winewayland.drv/pointer-warp-v1.xml
new file mode 100644
index 00000000000..158dad83c5d
--- /dev/null
+++ b/dlls/winewayland.drv/pointer-warp-v1.xml
@@ -0,0 +1,72 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<protocol name="pointer_warp_v1">
+  <copyright>
+    Copyright © 2024 Neal Gompa
+    Copyright © 2024 Xaver Hugl
+    Copyright © 2024 Matthias Klumpp
+    Copyright © 2024 Vlad Zahorodnii
+
+    Permission is hereby granted, free of charge, to any person obtaining a
+    copy of this software and associated documentation files (the "Software"),
+    to deal in the Software without restriction, including without limitation
+    the rights to use, copy, modify, merge, publish, distribute, sublicense,
+    and/or sell copies of the Software, and to permit persons to whom the
+    Software is furnished to do so, subject to the following conditions:
+    The above copyright notice and this permission notice (including the next
+    paragraph) shall be included in all copies or substantial portions of the
+    Software.
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
+    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+    DEALINGS IN THE SOFTWARE.
+  </copyright>
+
+  <interface name="wp_pointer_warp_v1" version="1">
+    <description summary="reposition the pointer to a location on a surface">
+      This global interface allows applications to request the pointer to be
+      moved to a position relative to a wl_surface.
+
+      Note that if the desired behavior is to constrain the pointer to an area
+      or lock it to a position, this protocol does not provide a reliable way
+      to do that. The pointer constraint and pointer lock protocols should be
+      used for those use cases instead.
+
+      Warning! The protocol described in this file is currently in the testing
+      phase. Backward compatible changes may be added together with the
+      corresponding interface version bump. Backward incompatible changes can
+      only be done by creating a new major version of the extension.
+    </description>
+
+    <request name="destroy" type="destructor">
+      <description summary="destroy the warp manager">
+        Destroy the pointer warp manager.
+      </description>
+    </request>
+
+    <request name="warp_pointer">
+      <description summary="reposition the pointer">
+        Request the compositor to move the pointer to a surface-local position.
+        Whether or not the compositor honors the request is implementation defined,
+        but it should
+        - honor it if the surface has pointer focus, including
+          when it has an implicit pointer grab
+        - reject it if the enter serial is incorrect
+        - reject it if the requested position is outside of the surface
+
+        Note that the enter serial is valid for any surface of the client,
+        and does not have to be from the surface the pointer is warped to.
+
+      </description>
+      <arg name="surface" type="object" interface="wl_surface"
+           summary="surface to position the pointer on"/>
+      <arg name="pointer" type="object" interface="wl_pointer"
+           summary="the pointer that should be repositioned"/>
+      <arg name="x" type="fixed"/>
+      <arg name="y" type="fixed"/>
+      <arg name="serial" type="uint" summary="serial number of the enter event"/>
+    </request>
+  </interface>
+</protocol>
diff --git a/dlls/winewayland.drv/wayland.c b/dlls/winewayland.drv/wayland.c
index 46a1eaa4fa6..18773dd758d 100644
--- a/dlls/winewayland.drv/wayland.c
+++ b/dlls/winewayland.drv/wayland.c
@@ -254,6 +254,11 @@ static void registry_handle_global(void *data, struct wl_registry *registry,
         process_wayland.xdg_toplevel_tag_manager_v1 =
             wl_registry_bind(registry, id, &xdg_toplevel_tag_manager_v1_interface, 1);
     }
+    else if (strcmp(interface, "wp_pointer_warp_v1") == 0)
+    {
+        process_wayland.wp_pointer_warp_v1 =
+            wl_registry_bind(registry, id, &wp_pointer_warp_v1_interface, 1);
+    }
 }
 
 static void registry_handle_global_remove(void *data, struct wl_registry *registry,
diff --git a/dlls/winewayland.drv/wayland_pointer.c b/dlls/winewayland.drv/wayland_pointer.c
index e7bf4b4f27b..fa3abde3c91 100644
--- a/dlls/winewayland.drv/wayland_pointer.c
+++ b/dlls/winewayland.drv/wayland_pointer.c
@@ -358,12 +358,6 @@ static void pointer_handle_frame(void *data, struct wl_pointer *wl_pointer)
     struct wayland_pointer *pointer = &process_wayland.pointer;
 
     if (!(hwnd = wayland_pointer_get_focused_hwnd())) return;
-    /* Drop the frame if the confinement was updated recently */
-    if (InterlockedCompareExchange(&pointer->confinement_updated, FALSE, TRUE))
-    {
-        TRACE("confinement updated! dropping pointer frame!\n");
-        return;
-    }
 
     TRACE("hwnd=%p\n", hwnd);
 
@@ -1205,10 +1199,6 @@ static void wayland_pointer_update_constraint(struct wl_surface *wl_surface,
     }
 
     pointer->relative_only = needs_relative;
-
-    /* we don't need to drop pointer frames when in relative only mode */
-    if (!pointer->relative_only)
-        InterlockedExchange(&pointer->confinement_updated, TRUE);
 }
 
 void wayland_pointer_clear_constraint(void)
@@ -1289,8 +1279,29 @@ BOOL WAYLAND_ClipCursor(const RECT *clip, BOOL reset)
     }
     wayland_win_data_release(data);
 
+    /* Broadly, a warp is performed by the following sequence:
+     * 1. lock
+     * 2. position hint
+     * 3. unlock
+     * 4. flush
+     *
+     * Instead, if the protocol is present we can change this sequence to:
+     * 1. warp
+     * 2. flush
+     */
+
     pthread_mutex_lock(&pointer->mutex);
-    if (wl_surface && pointer->pending_warp)
+    if (process_wayland.wp_pointer_warp_v1 && wl_surface && pointer->pending_warp)
+    {
+        wp_pointer_warp_v1_warp_pointer(process_wayland.wp_pointer_warp_v1,
+                                        wl_surface, pointer->wl_pointer,
+                                        wl_fixed_from_int(warp_x),
+                                        wl_fixed_from_int(warp_y),
+                                        pointer->enter_serial);
+        TRACE("Warping hwnd=%p warp_xy=%d,%d\n", hwnd, warp_x, warp_y);
+        pointer->pending_warp = FALSE;
+    }
+    else if (wl_surface && pointer->pending_warp)
     {
         wayland_pointer_update_constraint(wl_surface, NULL, FALSE, TRUE);
         pointer->pending_warp = FALSE;
diff --git a/dlls/winewayland.drv/waylanddrv.h b/dlls/winewayland.drv/waylanddrv.h
index ff9384a87e5..22d4a0abe03 100644
--- a/dlls/winewayland.drv/waylanddrv.h
+++ b/dlls/winewayland.drv/waylanddrv.h
@@ -50,6 +50,7 @@ struct xkb_compose_table;
 #include "content-type-v1-client-protocol.h"
 #include "linux-dmabuf-v1-client-protocol.h"
 #include "xdg-toplevel-tag-v1-client-protocol.h"
+#include "pointer-warp-v1-client-protocol.h"
 
 #include "windef.h"
 #include "winbase.h"
@@ -141,7 +142,6 @@ struct wayland_pointer
     HWND focused_hwnd;
     HWND constraint_hwnd;
     BOOL pending_warp;
-    BOOL confinement_updated;
     BOOL relative_only;
     uint32_t enter_serial;
     uint32_t button_serial;
@@ -225,6 +225,7 @@ struct wayland
     struct wp_cursor_shape_manager_v1 *wp_cursor_shape_manager_v1;
     struct zwp_linux_dmabuf_v1 *zwp_linux_dmabuf_v1;
     struct xdg_toplevel_tag_manager_v1 *xdg_toplevel_tag_manager_v1;
+    struct wp_pointer_warp_v1 *wp_pointer_warp_v1;
     struct wayland_seat seat;
     struct wayland_keyboard keyboard;
     struct wayland_pointer pointer;
-- 
2.51.0


From e9a5d3509ab0309edbfc3207dd579726aa00be9f Mon Sep 17 00:00:00 2001
From: Alexandre Julliard <julliard@winehq.org>
Date: Thu, 27 Feb 2025 11:01:12 +0100
Subject: [PATCH 427/441] makefiles: Add support for assembly source files.

---
 tools/make_makefiles |  2 +-
 tools/makedep.c      | 22 ++++++++++++++++++++++
 2 files changed, 23 insertions(+), 1 deletion(-)

diff --git a/tools/make_makefiles b/tools/make_makefiles
index 646a70d18f4..ad9494e983e 100755
--- a/tools/make_makefiles
+++ b/tools/make_makefiles
@@ -298,7 +298,7 @@ sub assign_sources_to_makefiles(@)
         {
             next unless $dir eq "dlls/winewayland.drv";
         }
-        elsif ($name !~ /\.(c|in|inl|l|m|mc|po|rc|rh|sfd|svg|x|y)$/)
+        elsif ($name !~ /\.(S|c|in|inl|l|m|mc|po|rc|rh|sfd|svg|x|y)$/)
         {
             next unless $dir eq "loader";  # loader dir contains misc files
         }
diff --git a/tools/makedep.c b/tools/makedep.c
index 84c3e02c275..6dd2c6b2378 100644
--- a/tools/makedep.c
+++ b/tools/makedep.c
@@ -608,6 +608,25 @@ static int is_native_arch_disabled( struct makefile *make )
 }
 
 
+/*******************************************************************
+ *         is_subdir_other_arch
+ *
+ * Check if the filename is in a subdirectory named from a different arch.
+ * Used to avoid building asm files for the wrong platform.
+ */
+static int is_subdir_other_arch( const char *name, unsigned int arch )
+{
+    const char *dir, *p = strrchr( name, '/' );
+
+    if (!p || p == name) return 0;
+    dir = get_basename( strmake( "%.*s", (int)(p - name), name ));
+    if (!strcmp( dir, "arm64" )) dir = "aarch64";
+    if (!strcmp( dir, "amd64" )) dir = "x86_64";
+    if (native_archs[arch] && !strcmp( dir, archs.str[native_archs[arch]] )) return 0;
+    return strcmp( dir, archs.str[arch] );
+}
+
+
 /*******************************************************************
  *         get_link_arch
  */
@@ -3238,6 +3257,8 @@ static void output_source_one_arch( struct makefile *make, struct incl_file *sou
         if (!(source->file->flags & FLAG_C_IMPLIB) && (!make->staticlib || make->extlib)) return;
     }
 
+    if (strendswith( source->name, ".S" ) && is_subdir_other_arch( source->name, arch )) return;
+
     obj_name = strmake( "%s%s.o", source->arch ? "" : arch_dirs[arch], obj );
     strarray_add( targets, obj_name );
 
@@ -3637,6 +3658,7 @@ static void output_static_lib( struct makefile *make, unsigned int arch )
     const char *name = strmake( "%s%s", arch_dirs[arch], make->staticlib );
     unsigned int hybrid_arch = hybrid_archs[arch];
 
+    if (make->disabled[arch]) return;
     if (native_archs[arch]) return;
 
     strarray_add( &make->clean_files, name );
-- 
2.51.0


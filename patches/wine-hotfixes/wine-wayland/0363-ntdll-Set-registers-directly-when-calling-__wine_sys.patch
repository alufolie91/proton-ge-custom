From cddbe3bf41dc7799704e11462088dcfb80e4c1c3 Mon Sep 17 00:00:00 2001
From: Alexandre Julliard <julliard@winehq.org>
Date: Mon, 19 May 2025 11:03:08 +0200
Subject: [PATCH 363/441] ntdll: Set registers directly when calling
 __wine_syscall_dispatcher_return() on syscall fault.

---
 dlls/ntdll/unix/signal_arm.c    | 21 ++++++++-------------
 dlls/ntdll/unix/signal_arm64.c  |  6 ++----
 dlls/ntdll/unix/signal_i386.c   | 25 ++++++++-----------------
 dlls/ntdll/unix/signal_x86_64.c |  8 +++-----
 dlls/ntdll/unix/unix_private.h  |  2 +-
 5 files changed, 22 insertions(+), 40 deletions(-)

diff --git a/dlls/ntdll/unix/signal_arm.c b/dlls/ntdll/unix/signal_arm.c
index 4c216391c68..30dcb99c29d 100644
--- a/dlls/ntdll/unix/signal_arm.c
+++ b/dlls/ntdll/unix/signal_arm.c
@@ -815,8 +815,8 @@ static BOOL handle_syscall_fault( ucontext_t *context, EXCEPTION_RECORD *rec )
     else
     {
         TRACE( "returning to user mode ip=%08x ret=%08x\n", frame->pc, rec->ExceptionCode );
-        REGn_sig(0, context) = (DWORD)frame;
-        REGn_sig(1, context) = rec->ExceptionCode;
+        REGn_sig(0, context) = rec->ExceptionCode;
+        REGn_sig(8, context) = (DWORD)frame;
         PC_sig(context)      = (DWORD)__wine_syscall_dispatcher_return;
     }
     return TRUE;
@@ -1180,7 +1180,7 @@ __ASM_GLOBAL_FUNC( signal_start_thread,
                    "mov sp, r6\n\t"
                    "mov r8, r6\n\t"
                    "bl init_syscall_frame\n\t"
-                   "b " __ASM_LOCAL_LABEL("__wine_syscall_dispatcher_return") )
+                   "b __wine_syscall_dispatcher_return" )
 
 
 /***********************************************************************
@@ -1240,9 +1240,9 @@ __ASM_GLOBAL_FUNC( __wine_syscall_dispatcher,
                    "pop {r0-r3}\n\t"                /* first 4 args are in registers */
                    "ldr r5, [r4]\n\t"               /* table->ServiceTable */
                    "ldr ip, [r5, ip, lsl #2]\n\t"
-                   "blx ip\n"
-                   __ASM_LOCAL_LABEL("__wine_syscall_dispatcher_return") ":\n\t"
-                   "ldr ip, [r8, #0x44]\n\t"    /* frame->restore_flags */
+                   "blx ip\n\t"
+                   __ASM_GLOBL("__wine_syscall_dispatcher_return") "\n\t"
+                   "ldr ip, [r8, #0x44]\n\t"        /* frame->restore_flags */
                    "tst ip, #4\n\t"                 /* CONTEXT_FLOATING_POINT */
                    "beq 3f\n\t"
                    "ldr r4, [r8, #0x48]\n\t"
@@ -1261,12 +1261,7 @@ __ASM_GLOBAL_FUNC( __wine_syscall_dispatcher,
 
                    "5:\tmovw r0, #0x000d\n\t" /* STATUS_INVALID_PARAMETER */
                    "movt r0, #0xc000\n\t"
-                   "b " __ASM_LOCAL_LABEL("__wine_syscall_dispatcher_return") )
-
-__ASM_GLOBAL_FUNC( __wine_syscall_dispatcher_return,
-                   "mov r8, r0\n\t"
-                   "mov r0, r1\n\t"
-                   "b " __ASM_LOCAL_LABEL("__wine_syscall_dispatcher_return") )
+                   "b __wine_syscall_dispatcher_return" )
 
 
 /***********************************************************************
@@ -1312,6 +1307,6 @@ __ASM_GLOBAL_FUNC( __wine_unix_call_dispatcher,
                    "ldr sp, [r8, #0x38]\n\t"
                    "add r8, r8, #0x10\n\t"
                    "ldm r8, {r4-r12,pc}\n\t"
-                   "1:\tb " __ASM_LOCAL_LABEL("__wine_syscall_dispatcher_return") )
+                   "1:\tb __wine_syscall_dispatcher_return" )
 
 #endif  /* __arm__ */
diff --git a/dlls/ntdll/unix/signal_arm64.c b/dlls/ntdll/unix/signal_arm64.c
index 0d22a77ec31..3e26716c238 100644
--- a/dlls/ntdll/unix/signal_arm64.c
+++ b/dlls/ntdll/unix/signal_arm64.c
@@ -1066,8 +1066,8 @@ static BOOL handle_syscall_fault( ucontext_t *context, EXCEPTION_RECORD *rec )
     else
     {
         TRACE( "returning to user mode ip=%p ret=%08x\n", (void *)frame->pc, rec->ExceptionCode );
-        REGn_sig(0, context) = (ULONG_PTR)frame;
-        REGn_sig(1, context) = rec->ExceptionCode;
+        REGn_sig(0, context) = rec->ExceptionCode;
+        SP_sig(context)      = (ULONG_PTR)frame;
         PC_sig(context)      = (ULONG_PTR)__wine_syscall_dispatcher_return;
     }
     return TRUE;
@@ -1686,8 +1686,6 @@ __ASM_GLOBAL_FUNC( __wine_syscall_dispatcher,
                    "b " __ASM_LOCAL_LABEL("__wine_syscall_dispatcher_return") )
 
 __ASM_GLOBAL_FUNC( __wine_syscall_dispatcher_return,
-                   "mov sp, x0\n\t"
-                   "mov x0, x1\n\t"
                    "b " __ASM_LOCAL_LABEL("__wine_syscall_dispatcher_return") )
 
 
diff --git a/dlls/ntdll/unix/signal_i386.c b/dlls/ntdll/unix/signal_i386.c
index 7f50274b000..f3ae13bf0da 100644
--- a/dlls/ntdll/unix/signal_i386.c
+++ b/dlls/ntdll/unix/signal_i386.c
@@ -1914,11 +1914,8 @@ static BOOL handle_syscall_fault( ucontext_t *sigcontext, void *stack_ptr,
                             wine_debuginfostr_pc( rec->ExceptionAddress ));
 
         TRACE( "returning to user mode ip=%08x ret=%08x\n", frame->eip, rec->ExceptionCode );
-        stack = (UINT *)frame;
-        *(--stack) = rec->ExceptionCode;
-        *(--stack) = (UINT)frame;
-        *(--stack) = 0xdeadbabe;  /* return address */
-        ESP_sig(sigcontext) = (DWORD)stack;
+        EAX_sig(sigcontext) = rec->ExceptionCode;
+        ESP_sig(sigcontext) = (DWORD)frame;
         EIP_sig(sigcontext) = (DWORD)__wine_syscall_dispatcher_return;
     }
     return TRUE;
@@ -2692,7 +2689,7 @@ __ASM_GLOBAL_FUNC( signal_start_thread,
                    "pushl 8(%ebp)\n\t"          /* entry */
                    "call " __ASM_NAME("init_syscall_frame") "\n\t"
                    "addl $16,%esp\n\t"
-                   "jmp " __ASM_LOCAL_LABEL("__wine_syscall_dispatcher_return") )
+                   "jmp " __ASM_NAME("__wine_syscall_dispatcher_return") )
 
 
 /***********************************************************************
@@ -2797,9 +2794,9 @@ __ASM_GLOBAL_FUNC( __wine_syscall_dispatcher,
                    "cld\n\t"
                    "rep; movsl\n\t"
                    "call *(%eax,%edx,4)\n\t"
-                   "leal -0x34(%ebp),%esp\n"
+                   "leal -0x34(%ebp),%esp\n\t"
 
-                   __ASM_LOCAL_LABEL("__wine_syscall_dispatcher_return") ":\t"
+                   __ASM_GLOBL(__ASM_NAME("__wine_syscall_dispatcher_return")) "\n\t"
                    "movl 0(%esp),%ecx\n\t"         /* frame->syscall_flags + (frame->restore_flags << 16) */
                    "testl $0x68 << 16,%ecx\n\t"    /* CONTEXT_FLOATING_POINT | CONTEXT_EXTENDED_REGISTERS | CONTEXT_XSAVE */
                    "jz 3f\n\t"
@@ -2877,14 +2874,8 @@ __ASM_GLOBAL_FUNC( __wine_syscall_dispatcher,
                    "iret\n"
                    /* pop ebp-based kernel stack cfi */
                    __ASM_CFI("\t.cfi_restore_state\n")
-
-                   "6:\tmovl $0xc000000d,%eax\n\t" /* STATUS_INVALID_PARAMETER */
-                   "jmp " __ASM_LOCAL_LABEL("__wine_syscall_dispatcher_return") )
-
-__ASM_GLOBAL_FUNC( __wine_syscall_dispatcher_return,
-                   "movl 8(%esp),%eax\n\t"
-                   "movl 4(%esp),%esp\n\t"
-                   "jmp " __ASM_LOCAL_LABEL("__wine_syscall_dispatcher_return") )
+                   "6:\tmovl $0xc000001c,%eax\n\t" /* STATUS_INVALID_SYSTEM_SERVICE */
+                   "jmp " __ASM_NAME("__wine_syscall_dispatcher_return") )
 
 
 /***********************************************************************
@@ -2930,7 +2921,7 @@ __ASM_GLOBAL_FUNC( __wine_unix_call_dispatcher,
                    "call *(%eax,%edx,4)\n\t"
                    "leal 16(%esp),%esp\n\t"
                    "testw $0x7fff,2(%esp)\n\t" /* frame->restore_flags */
-                   "jnz " __ASM_LOCAL_LABEL("__wine_syscall_dispatcher_return") "\n\t"
+                   "jnz " __ASM_NAME("__wine_syscall_dispatcher_return") "\n\t"
                    "movl 0x08(%esp),%ecx\n\t"  /* frame->eip */
                    /* switch to user stack */
                    "movl 0x0c(%esp),%esp\n\t"  /* frame->esp */
diff --git a/dlls/ntdll/unix/signal_x86_64.c b/dlls/ntdll/unix/signal_x86_64.c
index 518f1aea170..41234cdb097 100644
--- a/dlls/ntdll/unix/signal_x86_64.c
+++ b/dlls/ntdll/unix/signal_x86_64.c
@@ -2322,8 +2322,9 @@ static BOOL handle_syscall_fault( ucontext_t *sigcontext, EXCEPTION_RECORD *rec,
         }
 
         TRACE_(seh)( "returning to user mode ip=%016lx ret=%08x\n", frame->rip, rec->ExceptionCode );
-        RDI_sig(sigcontext) = (ULONG_PTR)frame;
-        RSI_sig(sigcontext) = rec->ExceptionCode;
+        RAX_sig(sigcontext) = rec->ExceptionCode;
+        RCX_sig(sigcontext) = (ULONG_PTR)frame;
+        R14_sig(sigcontext) = frame->syscall_flags;
         RIP_sig(sigcontext) = (ULONG_PTR)__wine_syscall_dispatcher_return;
     }
     return TRUE;
@@ -3473,9 +3474,6 @@ __ASM_GLOBAL_FUNC( __wine_syscall_dispatcher,
                    "jmp " __ASM_LOCAL_LABEL("__wine_syscall_dispatcher_return") )
 
 __ASM_GLOBAL_FUNC( __wine_syscall_dispatcher_return,
-                   "movq %rdi,%rcx\n\t"
-                   "movl 0xb0(%rcx),%r14d\n\t"     /* frame->syscall_flags */
-                   "movq %rsi,%rax\n\t"
                    "jmp " __ASM_LOCAL_LABEL("__wine_syscall_dispatcher_return") )
 
 
diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
index 8bb0bd4d465..ee7298d4b04 100644
--- a/dlls/ntdll/unix/unix_private.h
+++ b/dlls/ntdll/unix/unix_private.h
@@ -344,7 +344,7 @@ extern void DECLSPEC_NORETURN signal_start_thread( PRTL_THREAD_START_ROUTINE ent
                                                    BOOL suspend, TEB *teb );
 extern SYSTEM_SERVICE_TABLE KeServiceDescriptorTable[4];
 extern void __wine_syscall_dispatcher(void);
-extern void DECLSPEC_NORETURN __wine_syscall_dispatcher_return( void *frame, ULONG_PTR retval );
+extern void __wine_syscall_dispatcher_return(void);
 extern void __wine_unix_call_dispatcher(void);
 extern NTSTATUS signal_set_full_context( CONTEXT *context );
 extern NTSTATUS get_thread_wow64_context( HANDLE handle, void *ctx, ULONG size );
-- 
2.51.0


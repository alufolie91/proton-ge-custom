From c2eb8ab36e8886c0b9a1395070500272df7925ba Mon Sep 17 00:00:00 2001
From: Alexandre Julliard <julliard@winehq.org>
Date: Mon, 31 Mar 2025 12:00:42 +0200
Subject: [PATCH 248/365] wineboot: Fetch the list of supported machines once
 at startup.

---
 programs/wineboot/wineboot.c | 51 ++++++++++++++++--------------------
 1 file changed, 23 insertions(+), 28 deletions(-)

diff --git a/programs/wineboot/wineboot.c b/programs/wineboot/wineboot.c
index d2c5aba6ae8..71c08f32f7b 100644
--- a/programs/wineboot/wineboot.c
+++ b/programs/wineboot/wineboot.c
@@ -91,6 +91,7 @@ extern void kill_processes( BOOL kill_desktop );
 
 static WCHAR windowsdir[MAX_PATH];
 static const BOOL is_64bit = sizeof(void *) > sizeof(int);
+static SYSTEM_SUPPORTED_PROCESSOR_ARCHITECTURES_INFORMATION machines[8];
 
 /* retrieve the path to the wine.inf file */
 static WCHAR *get_wine_inf_path(void)
@@ -403,7 +404,6 @@ static UINT64 read_tsc_frequency(void)
 
 static void create_user_shared_data(void)
 {
-    SYSTEM_SUPPORTED_PROCESSOR_ARCHITECTURES_INFORMATION machines[8];
     struct _KUSER_SHARED_DATA *data;
     RTL_OSVERSIONINFOEXW version;
     SYSTEM_CPU_INFORMATION sci;
@@ -414,7 +414,6 @@ static void create_user_shared_data(void)
     NTSTATUS status;
     HANDLE handle;
     ULONG i;
-    HANDLE process = 0;
 
     InitializeObjectAttributes( &attr, &name, OBJ_OPENIF, NULL, NULL );
     if ((status = NtOpenSection( &handle, SECTION_ALL_ACCESS, &attr )))
@@ -507,29 +506,25 @@ static void create_user_shared_data(void)
         features[PF_NX_ENABLED]                           = TRUE;
         features[PF_FASTFAIL_AVAILABLE]                   = TRUE;
         /* add features for other architectures supported by wow64 */
-        if (!NtQuerySystemInformationEx( SystemSupportedProcessorArchitectures, &process, sizeof(process),
-                                         machines, sizeof(machines), NULL ))
+        for (i = 0; machines[i].Machine; i++)
         {
-            for (i = 0; machines[i].Machine; i++)
+            switch (machines[i].Machine)
             {
-                switch (machines[i].Machine)
-                {
-                case IMAGE_FILE_MACHINE_ARMNT:
-                    features[PF_ARM_VFP_32_REGISTERS_AVAILABLE]  = TRUE;
-                    features[PF_ARM_NEON_INSTRUCTIONS_AVAILABLE] = TRUE;
-                    break;
-                case IMAGE_FILE_MACHINE_I386:
-                    features[PF_MMX_INSTRUCTIONS_AVAILABLE]    = TRUE;
-                    features[PF_XMMI_INSTRUCTIONS_AVAILABLE]   = TRUE;
-                    features[PF_RDTSC_INSTRUCTION_AVAILABLE]   = TRUE;
-                    features[PF_XMMI64_INSTRUCTIONS_AVAILABLE] = TRUE;
-                    features[PF_SSE3_INSTRUCTIONS_AVAILABLE]   = TRUE;
-                    features[PF_RDTSCP_INSTRUCTION_AVAILABLE]  = TRUE;
-                    features[PF_SSSE3_INSTRUCTIONS_AVAILABLE]  = TRUE;
-                    features[PF_SSE4_1_INSTRUCTIONS_AVAILABLE] = TRUE;
-                    features[PF_SSE4_2_INSTRUCTIONS_AVAILABLE] = TRUE;
-                    break;
-                }
+            case IMAGE_FILE_MACHINE_ARMNT:
+                features[PF_ARM_VFP_32_REGISTERS_AVAILABLE]  = TRUE;
+                features[PF_ARM_NEON_INSTRUCTIONS_AVAILABLE] = TRUE;
+                break;
+            case IMAGE_FILE_MACHINE_I386:
+                features[PF_MMX_INSTRUCTIONS_AVAILABLE]    = TRUE;
+                features[PF_XMMI_INSTRUCTIONS_AVAILABLE]   = TRUE;
+                features[PF_RDTSC_INSTRUCTION_AVAILABLE]   = TRUE;
+                features[PF_XMMI64_INSTRUCTIONS_AVAILABLE] = TRUE;
+                features[PF_SSE3_INSTRUCTIONS_AVAILABLE]   = TRUE;
+                features[PF_RDTSCP_INSTRUCTION_AVAILABLE]  = TRUE;
+                features[PF_SSSE3_INSTRUCTIONS_AVAILABLE]  = TRUE;
+                features[PF_SSE4_1_INSTRUCTIONS_AVAILABLE] = TRUE;
+                features[PF_SSE4_2_INSTRUCTIONS_AVAILABLE] = TRUE;
+                break;
             }
         }
         break;
@@ -1839,13 +1834,9 @@ static void update_wineprefix( BOOL force )
 
     if (update_timestamp( config_dir, st.st_mtime ) || force)
     {
-        SYSTEM_SUPPORTED_PROCESSOR_ARCHITECTURES_INFORMATION machines[8];
-        HANDLE process = 0;
+        HANDLE process;
         DWORD count = 0;
 
-        if (NtQuerySystemInformationEx( SystemSupportedProcessorArchitectures, &process, sizeof(process),
-                                        machines, sizeof(machines), NULL )) machines[0].Machine = 0;
-
         if ((process = start_rundll32( inf_path, L"PreInstall", IMAGE_FILE_MACHINE_TARGET_HOST )))
         {
             for (;;)
@@ -2028,6 +2019,7 @@ int __cdecl main( int argc, char *argv[] )
     HANDLE event;
     OBJECT_ATTRIBUTES attr;
     UNICODE_STRING nameW = RTL_CONSTANT_STRING( L"\\KernelObjects\\__wineboot_event" );
+    HANDLE process = 0;
     BOOL is_wow64;
 
     end_session = force = init = kill = restart = shutdown = update = FALSE;
@@ -2106,6 +2098,9 @@ int __cdecl main( int argc, char *argv[] )
 
     if (shutdown) return 0;
 
+    if (NtQuerySystemInformationEx( SystemSupportedProcessorArchitectures, &process, sizeof(process),
+                                    machines, sizeof(machines), NULL )) machines[0].Machine = 0;
+
     /* create event to be inherited by services.exe */
     InitializeObjectAttributes( &attr, &nameW, OBJ_OPENIF | OBJ_INHERIT, 0, NULL );
     NtCreateEvent( &event, EVENT_ALL_ACCESS, &attr, NotificationEvent, 0 );
-- 
2.50.1


From 6dc89964f467b63f89853eaa5178f77a93a1308b Mon Sep 17 00:00:00 2001
From: Mark Jansen <mark.jansen@reactos.org>
Date: Fri, 4 Nov 2022 19:13:24 +0100
Subject: [PATCH 341/365] version/tests: Add a test for an empty value in
 VerQueryValueW.

---
 dlls/version/tests/info.c | 145 ++++++++++++++++++++++++++++++++++++++
 1 file changed, 145 insertions(+)

diff --git a/dlls/version/tests/info.c b/dlls/version/tests/info.c
index fa7ef219193..6b9cc0e7d89 100644
--- a/dlls/version/tests/info.c
+++ b/dlls/version/tests/info.c
@@ -580,6 +580,150 @@ static void test_VerQueryValueA(void)
     HeapFree(GetProcessHeap(), 0, ver);
 }
 
+/* taken from fusionpriv.h */
+    #include <pshpack1.h>
+typedef struct
+{
+    WORD wLength;
+    WORD wValueLength;
+    WORD wType;
+    WCHAR szKey[17];
+    VS_FIXEDFILEINFO Value;
+} VS_VERSIONINFO;
+
+typedef struct
+{
+    WORD wLength;
+    WORD wValueLength;
+    WORD wType;
+    WCHAR szKey[15];
+} STRINGFILEINFO;
+
+typedef struct
+{
+    WORD wLength;
+    WORD wValueLength;
+    WORD wType;
+    WCHAR szKey[9];
+} STRINGTABLE;
+
+typedef struct
+{
+    WORD wLength;
+    WORD wValueLength;
+    WORD wType;
+} STRINGHDR;
+
+typedef struct rsrc_section_t
+{
+    VS_VERSIONINFO version_info;
+    STRINGFILEINFO string_file_info;
+    STRINGTABLE string_table;
+
+    STRINGHDR FileVersion_hdr;
+    WCHAR FileVersion_key[13];
+
+    STRINGHDR ProductVersion_hdr;
+    WCHAR ProductVersion_key[15];
+    WCHAR ProductVersion_val[8];
+} rsrc_section_t;
+
+#include <poppack.h>
+
+#define    RT_VERSION_DW       16
+static const rsrc_section_t rsrc_section =
+{
+    /* version_info */
+    {
+    320, /* wLength */
+    0x34, /* wValueLength */
+    0, /* wType: Binary */
+    { 'V','S','_','V','E','R','S','I','O','N','_','I','N','F','O','\0','\0' }, /* szKey[17] */
+        /* Value */
+        {
+            0xFEEF04BD, /* dwSignature */
+            0x10000, /* dwStrucVersion */
+            0x10000, /* dwFileVersionMS */
+            0, /* dwFileVersionLS */
+            0x10000, /* dwProductVersionMS */
+            1, /* dwProductVersionLS */
+            0, /* dwFileFlagsMask */
+            0, /* dwFileFlags */
+            VOS__WINDOWS32, /* dwFileOS */
+            VFT_APP, /* dwFileType */
+            0, /* dwFileSubtype */
+            0x01d1a019, /* dwFileDateMS */
+            0xac754c50 /* dwFileDateLS */
+        },
+    },
+
+    /* string_file_info */
+    {
+        0x9E, /* wLength */
+        0, /* wValueLength */
+        1, /* wType: Text */
+        { 'S','t','r','i','n','g','F','i','l','e','I','n','f','o','\0' } /* szKey[15] */
+    },
+    /* string_table */
+    {
+        0x7A, /* wLength */
+        0, /* wValueLength */
+        1, /* wType: Text */
+        { 'F','F','F','F','0','0','0','0','\0' } /* szKey[9] */
+    },
+
+    /* FileVersion */
+    {
+        32, /* wLength */
+        0, /* wValueLength */
+        1, /* wType: Text */
+    },
+    { 'F','i','l','e','V','e','r','s','i','o','n','\0' },
+    /* There is no data here! */
+
+    /* ProductVersion */
+    {
+        52, /* wLength */
+        8, /* wValueLength */
+        1, /* wType: Text */
+    },
+    { 'P','r','o','d','u','c','t','V','e','r','s','i','o','n','\0' },
+    { '1','.','0','.','0','.','1','\0' },
+};
+
+static void test_VerQueryValue_EmptyData(void)
+{
+    char* p;
+    UINT len;
+    BOOL ret;
+    char* ver;
+
+    ver = HeapAlloc(GetProcessHeap(), 0, sizeof(rsrc_section) * 2);
+    ok(ver != NULL, "Can't allocate memory\n");
+    memcpy(ver, &rsrc_section, sizeof(rsrc_section));
+
+    /* Key without data */
+    p = (char *)0xdeadbeef;
+    len = 0xdeadbeef;
+    SetLastError(0xdeadbeef);
+    ret = VerQueryValueW(ver, L"\\StringFileInfo\\FFFF0000\\FileVersion", (LPVOID *)&p, &len);
+    ok(ret, "VerQueryValueW error %lu\n", GetLastError());
+    ok(len == 0, "VerQueryValueW returned %u, expected 0\n", len);
+    todo_wine
+    ok(p == (ver + offsetof(rsrc_section_t, FileVersion_key) + 11 * sizeof(WCHAR)), "p was %p, expected %p\n", p, ver + offsetof(rsrc_section_t, FileVersion_key) + 11 * sizeof(WCHAR));
+
+    /* The key behind it, to show that parsing continues just fine */
+    p = (char *)0xdeadbeef;
+    len = 0xdeadbeef;
+    SetLastError(0xdeadbeef);
+    ret = VerQueryValueW(ver, L"\\StringFileInfo\\FFFF0000\\ProductVersion", (LPVOID *)&p, &len);
+    ok(ret, "VerQueryValueW error %lu\n", GetLastError());
+    ok(len == 8, "VerQueryValueW returned %u, expected 0\n", len);
+    ok(p == (ver + offsetof(rsrc_section_t, ProductVersion_val)), "p was %p, expected %p\n", p, ver + offsetof(rsrc_section_t, ProductVersion_val));
+
+    HeapFree(GetProcessHeap(), 0, ver);
+}
+
 static void test_extra_block(void)
 {
     WORD extra_block[] = {
@@ -839,6 +983,7 @@ START_TEST(info)
     test_info();
     test_32bit_win();
     test_VerQueryValueA();
+    test_VerQueryValue_EmptyData();
     test_extra_block();
     test_GetFileVersionInfoEx();
     test_wow64_redirection();
-- 
2.50.1


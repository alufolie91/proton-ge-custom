From 2b6346dad9afc4c5871690a852b7467efb01dd8e Mon Sep 17 00:00:00 2001
From: Piotr Caban <piotr@codeweavers.com>
Date: Wed, 6 Aug 2025 16:47:12 +0200
Subject: [PATCH 270/327] vccorlib140: Add Platform::Details::InitializeData
 semi-stub.

---
 configure.ac                       |   1 +
 dlls/vccorlib140/Makefile.in       |   4 +
 dlls/vccorlib140/tests/Makefile.in |   5 +
 dlls/vccorlib140/tests/vccorlib.c  | 222 +++++++++++++++++++++++++++++
 dlls/vccorlib140/vccorlib.c        |  42 ++++++
 dlls/vccorlib140/vccorlib140.spec  |   5 +-
 6 files changed, 276 insertions(+), 3 deletions(-)
 create mode 100644 dlls/vccorlib140/tests/Makefile.in
 create mode 100644 dlls/vccorlib140/tests/vccorlib.c
 create mode 100644 dlls/vccorlib140/vccorlib.c

diff --git a/configure.ac b/configure.ac
index 33ae7be1cd4..b2b4d6612b9 100644
--- a/configure.ac
+++ b/configure.ac
@@ -3228,6 +3228,7 @@ WINE_CONFIG_MAKEFILE(dlls/uxtheme/tests)
 WINE_CONFIG_MAKEFILE(dlls/vbscript)
 WINE_CONFIG_MAKEFILE(dlls/vbscript/tests)
 WINE_CONFIG_MAKEFILE(dlls/vccorlib140)
+WINE_CONFIG_MAKEFILE(dlls/vccorlib140/tests)
 WINE_CONFIG_MAKEFILE(dlls/vcomp)
 WINE_CONFIG_MAKEFILE(dlls/vcomp/tests)
 WINE_CONFIG_MAKEFILE(dlls/vcomp100)
diff --git a/dlls/vccorlib140/Makefile.in b/dlls/vccorlib140/Makefile.in
index a6388cbf8c5..13d54aa369e 100644
--- a/dlls/vccorlib140/Makefile.in
+++ b/dlls/vccorlib140/Makefile.in
@@ -1 +1,5 @@
 MODULE = vccorlib140.dll
+IMPORTS = combase
+
+SOURCES = \
+	vccorlib.c
diff --git a/dlls/vccorlib140/tests/Makefile.in b/dlls/vccorlib140/tests/Makefile.in
new file mode 100644
index 00000000000..b75d820bc8c
--- /dev/null
+++ b/dlls/vccorlib140/tests/Makefile.in
@@ -0,0 +1,5 @@
+TESTDLL = vccorlib140.dll
+IMPORTS = ole32 uuid
+
+SOURCES = \
+	vccorlib.c
diff --git a/dlls/vccorlib140/tests/vccorlib.c b/dlls/vccorlib140/tests/vccorlib.c
new file mode 100644
index 00000000000..581bca3c838
--- /dev/null
+++ b/dlls/vccorlib140/tests/vccorlib.c
@@ -0,0 +1,222 @@
+/*
+ * Unit tests for miscellaneous vccorlib functions
+ *
+ * Copyright 2025 Piotr Caban
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
+ */
+
+#define COBJMACROS
+
+#include "objbase.h"
+#include "wine/test.h"
+
+#define DEFINE_EXPECT(func) \
+    static BOOL expect_ ## func = FALSE; static unsigned int called_ ## func = 0
+
+#define SET_EXPECT(func) \
+    expect_ ## func = TRUE
+
+#define CHECK_EXPECT2(func) \
+    do { \
+        ok(expect_ ##func, "unexpected call " #func "\n"); \
+        called_ ## func++; \
+    }while(0)
+
+#define CHECK_EXPECT(func) \
+    do { \
+        CHECK_EXPECT2(func); \
+        expect_ ## func = FALSE; \
+    }while(0)
+
+#define CHECK_CALLED(func, n) \
+    do { \
+        ok(called_ ## func == n, "expected " #func " called %u times, got %u\n", n, called_ ## func); \
+        expect_ ## func = FALSE; \
+        called_ ## func = 0; \
+    }while(0)
+
+DEFINE_EXPECT(PreInitialize);
+DEFINE_EXPECT(PostInitialize);
+DEFINE_EXPECT(PreUninitialize);
+DEFINE_EXPECT(PostUninitialize);
+
+static HRESULT (__cdecl *pInitializeData)(int);
+static void (__cdecl *pUninitializeData)(int);
+
+static BOOL init(void)
+{
+    HMODULE hmod = LoadLibraryA("vccorlib140.dll");
+
+    if (!hmod)
+    {
+        win_skip("vccorlib140.dll not available\n");
+        return FALSE;
+    }
+
+    pInitializeData = (void *)GetProcAddress(hmod,
+            "?InitializeData@Details@Platform@@YAJH@Z");
+    ok(pInitializeData != NULL, "InitializeData not available\n");
+    pUninitializeData = (void *)GetProcAddress(hmod,
+            "?UninitializeData@Details@Platform@@YAXH@Z");
+    ok(pUninitializeData != NULL, "UninitializeData not available\n");
+
+    return TRUE;
+}
+
+static HRESULT WINAPI InitializeSpy_QI(IInitializeSpy *iface, REFIID riid, void **obj)
+{
+    if (IsEqualIID(riid, &IID_IInitializeSpy) || IsEqualIID(riid, &IID_IUnknown))
+    {
+        *obj = iface;
+        IInitializeSpy_AddRef(iface);
+        return S_OK;
+    }
+
+    *obj = NULL;
+    return E_NOINTERFACE;
+}
+
+static ULONG WINAPI InitializeSpy_AddRef(IInitializeSpy *iface)
+{
+    return 2;
+}
+
+static ULONG WINAPI InitializeSpy_Release(IInitializeSpy *iface)
+{
+    return 1;
+}
+
+static DWORD exp_coinit;
+static HRESULT WINAPI InitializeSpy_PreInitialize(IInitializeSpy *iface, DWORD coinit, DWORD aptrefs)
+{
+    CHECK_EXPECT(PreInitialize);
+    todo_wine_if(coinit == COINIT_APARTMENTTHREADED)
+        ok(coinit == exp_coinit, "coinit = %lx\n", coinit);
+    return S_OK;
+}
+
+static HRESULT WINAPI InitializeSpy_PostInitialize(IInitializeSpy *iface, HRESULT hr, DWORD coinit, DWORD aptrefs)
+{
+    CHECK_EXPECT(PostInitialize);
+    return hr;
+}
+
+static HRESULT WINAPI InitializeSpy_PreUninitialize(IInitializeSpy *iface, DWORD aptrefs)
+{
+    CHECK_EXPECT(PreUninitialize);
+    return S_OK;
+}
+
+static HRESULT WINAPI InitializeSpy_PostUninitialize(IInitializeSpy *iface, DWORD aptrefs)
+{
+    CHECK_EXPECT(PostUninitialize);
+    return S_OK;
+}
+
+static const IInitializeSpyVtbl InitializeSpyVtbl =
+{
+    InitializeSpy_QI,
+    InitializeSpy_AddRef,
+    InitializeSpy_Release,
+    InitializeSpy_PreInitialize,
+    InitializeSpy_PostInitialize,
+    InitializeSpy_PreUninitialize,
+    InitializeSpy_PostUninitialize
+};
+
+static IInitializeSpy InitializeSpy = { &InitializeSpyVtbl };
+
+static void test_InitializeData(void)
+{
+    ULARGE_INTEGER cookie;
+    HRESULT hr;
+
+    hr = CoRegisterInitializeSpy(&InitializeSpy, &cookie);
+    ok(hr == S_OK, "CoRegisterInitializeSpy returned %lx\n", hr);
+
+    hr = pInitializeData(0);
+    ok(hr == S_OK, "InitializeData returned %lx\n", hr);
+
+    exp_coinit = COINIT_APARTMENTTHREADED | COINIT_DISABLE_OLE1DDE;
+    SET_EXPECT(PreInitialize);
+    SET_EXPECT(PostInitialize);
+    hr = pInitializeData(1);
+    ok(hr == S_OK, "InitializeData returned %lx\n", hr);
+    CHECK_CALLED(PreInitialize, 1);
+    CHECK_CALLED(PostInitialize, 1);
+
+    SET_EXPECT(PreInitialize);
+    SET_EXPECT(PostInitialize);
+    hr = pInitializeData(1);
+    ok(hr == S_OK, "InitializeData returned %lx\n", hr);
+    CHECK_CALLED(PreInitialize, 1);
+    CHECK_CALLED(PostInitialize, 1);
+
+    exp_coinit = COINIT_MULTITHREADED;
+    SET_EXPECT(PreInitialize);
+    SET_EXPECT(PostInitialize);
+    hr = pInitializeData(2);
+    ok(hr == RPC_E_CHANGED_MODE, "InitializeData returned %lx\n", hr);
+    CHECK_CALLED(PreInitialize, 1);
+    CHECK_CALLED(PostInitialize, 1);
+
+    pUninitializeData(0);
+    SET_EXPECT(PreUninitialize);
+    SET_EXPECT(PostUninitialize);
+    pUninitializeData(1);
+    CHECK_CALLED(PreUninitialize, 1);
+    CHECK_CALLED(PostUninitialize, 1);
+    SET_EXPECT(PreUninitialize);
+    SET_EXPECT(PostUninitialize);
+    pUninitializeData(2);
+    CHECK_CALLED(PreUninitialize, 1);
+    CHECK_CALLED(PostUninitialize, 1);
+
+    SET_EXPECT(PreInitialize);
+    SET_EXPECT(PostInitialize);
+    hr = pInitializeData(2);
+    ok(hr == S_OK, "InitializeData returned %lx\n", hr);
+    CHECK_CALLED(PreInitialize, 1);
+    CHECK_CALLED(PostInitialize, 1);
+    SET_EXPECT(PreUninitialize);
+    SET_EXPECT(PostUninitialize);
+    pUninitializeData(2);
+    CHECK_CALLED(PreUninitialize, 1);
+    CHECK_CALLED(PostUninitialize, 1);
+
+    SET_EXPECT(PreInitialize);
+    SET_EXPECT(PostInitialize);
+    hr = pInitializeData(3);
+    ok(hr == S_OK, "InitializeData returned %lx\n", hr);
+    CHECK_CALLED(PreInitialize, 1);
+    CHECK_CALLED(PostInitialize, 1);
+    SET_EXPECT(PreUninitialize);
+    SET_EXPECT(PostUninitialize);
+    pUninitializeData(3);
+    CHECK_CALLED(PreUninitialize, 1);
+    CHECK_CALLED(PostUninitialize, 1);
+
+    hr = CoRevokeInitializeSpy(cookie);
+    ok(hr == S_OK, "CoRevokeInitializeSpy returned %lx\n", hr);
+}
+
+START_TEST(vccorlib)
+{
+    if(!init())
+        return;
+
+    test_InitializeData();
+}
diff --git a/dlls/vccorlib140/vccorlib.c b/dlls/vccorlib140/vccorlib.c
new file mode 100644
index 00000000000..6665a5962a5
--- /dev/null
+++ b/dlls/vccorlib140/vccorlib.c
@@ -0,0 +1,42 @@
+/*
+ * Copyright 2025 Piotr Caban
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
+ */
+
+#include "roapi.h"
+#include "wine/debug.h"
+
+WINE_DEFAULT_DEBUG_CHANNEL(vccorlib);
+
+HRESULT __cdecl InitializeData(int type)
+{
+    HRESULT hres;
+
+    FIXME("(%d) semi-stub\n", type);
+
+    if (!type) return S_OK;
+
+    hres = RoInitialize(type == 1 ? RO_INIT_SINGLETHREADED : RO_INIT_MULTITHREADED);
+    if (FAILED(hres)) return hres;
+    return S_OK;
+}
+
+void __cdecl UninitializeData(int type)
+{
+    TRACE("(%d)\n", type);
+
+    if (type) RoUninitialize();
+}
diff --git a/dlls/vccorlib140/vccorlib140.spec b/dlls/vccorlib140/vccorlib140.spec
index efdecef5de6..ecae1e9464a 100644
--- a/dlls/vccorlib140/vccorlib140.spec
+++ b/dlls/vccorlib140/vccorlib140.spec
@@ -184,8 +184,7 @@
 @ stub -arch=win64 ?GetWeakReference@Details@Platform@@YAPEAU__abi_IUnknown@@QE$ADVObject@2@@Z
 @ stub -arch=win32 ?InitControlBlock@ControlBlock@Details@Platform@@AAEXPAX_N11@Z
 @ stub -arch=win64 ?InitControlBlock@ControlBlock@Details@Platform@@AEAAXPEAX_N11@Z
-@ stub -arch=win32 ?InitializeData@Details@Platform@@YAJH@Z
-@ stub -arch=win64 ?InitializeData@Details@Platform@@YAJH@Z
+@ cdecl ?InitializeData@Details@Platform@@YAJH@Z(long) InitializeData
 @ stub -arch=win32 ?Intersect@Rect@Foundation@Windows@@QAAXV123@@Z
 @ stub -arch=win64 ?Intersect@Rect@Foundation@Windows@@QEAAXV123@@Z
 @ stub -arch=win32 ?IntersectsWith@Rect@Foundation@Windows@@QAA_NV123@@Z
@@ -274,7 +273,7 @@
 @ stub -arch=win64 ?ToString@uint64@default@@QEAAPE$AAVString@Platform@@XZ
 @ stub -arch=win32 ?ToString@uint8@default@@QAAP$AAVString@Platform@@XZ
 @ stub -arch=win64 ?ToString@uint8@default@@QEAAPE$AAVString@Platform@@XZ
-@ stub ?UninitializeData@Details@Platform@@YAXH@Z
+@ cdecl ?UninitializeData@Details@Platform@@YAXH@Z(long) UninitializeData
 @ stub -arch=win32 ?Union@Rect@Foundation@Windows@@QAAXV123@@Z
 @ stub -arch=win64 ?Union@Rect@Foundation@Windows@@QEAAXV123@@Z
 @ stub -arch=win32 ?Union@Rect@Foundation@Windows@@QAAXVPoint@23@@Z
-- 
2.51.0


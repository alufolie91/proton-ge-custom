From 1dde8646a1f9d09b6dbdf203988819bc14aeee10 Mon Sep 17 00:00:00 2001
From: Etaash Mathamsetty
 <45927311+Etaash-mathamsetty@users.noreply.github.com>
Date: Wed, 15 Oct 2025 15:48:31 -0500
Subject: [PATCH 368/441] ntdll: fixup dump_syscall_fault.

---
 dlls/ntdll/unix/signal_i386.c   |  2 +-
 dlls/ntdll/unix/signal_x86_64.c | 15 +++++++++++----
 2 files changed, 12 insertions(+), 5 deletions(-)

diff --git a/dlls/ntdll/unix/signal_i386.c b/dlls/ntdll/unix/signal_i386.c
index bf3c05dc72c..99a23e0fb0a 100644
--- a/dlls/ntdll/unix/signal_i386.c
+++ b/dlls/ntdll/unix/signal_i386.c
@@ -2537,7 +2537,7 @@ void signal_init_process(void)
     struct ntdll_thread_data *thread_data = ntdll_get_thread_data();
     void *kernel_stack = (char *)thread_data->kernel_stack + kernel_stack_size;
 
-    thread_data->syscall_frame = (struct syscall_frame *)(((ULONG_PTR)kernel_stack
+    thread_data->syscall_frame = (struct syscall_frame *)(ULONG_PTR)(((ULONG_PTR)kernel_stack
                                                            - sizeof(struct syscall_frame)
                                                            - xstate_features_size) & ~(ULONG_PTR)63);
     x86_thread_data()->xstate_features_size = xstate_features_size;
diff --git a/dlls/ntdll/unix/signal_x86_64.c b/dlls/ntdll/unix/signal_x86_64.c
index d2c8b05e3ec..7b59d4e601d 100644
--- a/dlls/ntdll/unix/signal_x86_64.c
+++ b/dlls/ntdll/unix/signal_x86_64.c
@@ -1895,7 +1895,7 @@ static inline DWORD is_privileged_instr( CONTEXT *context )
 static void sigsys_handler( int signal, siginfo_t *siginfo, void *sigcontext )
 {
     extern const void *__wine_syscall_dispatcher_prolog_end_ptr;
-    struct syscall_frame *frame = amd64_thread_data()->syscall_frame;
+    struct syscall_frame *frame = get_syscall_frame();
     ucontext_t *ctx = sigcontext;
 
     TRACE_(seh)("SIGSYS, rax %#llx, rip %#llx.\n", ctx->uc_mcontext.gregs[REG_RAX],
@@ -2047,7 +2047,7 @@ static void install_bpf(struct sigaction *sig_act)
         BPF_STMT(BPF_RET | BPF_K, SECCOMP_RET_ALLOW),
     };
     long (*test_syscall)(long sc_number);
-    struct syscall_frame *frame = amd64_thread_data()->syscall_frame;
+    struct syscall_frame *frame = get_syscall_frame();
     struct sock_fprog prog;
     unsigned int i, j;
     NTSTATUS status;
@@ -2198,7 +2198,8 @@ static inline BOOL handle_interrupt( ucontext_t *sigcontext, EXCEPTION_RECORD *r
 
 static void dump_syscall_fault( CONTEXT *context, DWORD exc_code )
 {
-    struct syscall_frame *frame = amd64_thread_data()->syscall_frame;
+    struct ntdll_thread_data *data = ntdll_get_thread_data();
+    struct syscall_frame *frame = data->syscall_frame;
     struct unwind_builtin_dll_params params;
 
     __TRY
@@ -2235,7 +2236,13 @@ static void dump_syscall_fault( CONTEXT *context, DWORD exc_code )
     __ENDTRY
 
     WINE_BACKTRACE_LOG( "returning to user mode ip=%016lx ret=%08x\n", frame->rip, exc_code );
-    __wine_syscall_dispatcher_return( frame, exc_code );
+
+    __asm__ volatile( "movq %0, %%rcx\n\t"
+                      "movq %1, %%rax\n\t"
+                      "movl 0xb0(%%rcx), %%r14d\n\t"
+                      "jmp "  __ASM_LOCAL_LABEL("__wine_syscall_dispatcher_return")
+                      :: "m" (frame), "m" (exc_code) : "rcx", "r14", "rax"
+                    );
 }
 
 /***********************************************************************
-- 
2.51.0


From cc3a0b3835ff9e8ef61897118ef0ab15f7ed0ef0 Mon Sep 17 00:00:00 2001
From: Alexandre Julliard <julliard@winehq.org>
Date: Fri, 19 Sep 2025 14:51:34 +0200
Subject: [PATCH 371/441] ntdll: Clear alignment flag on signal entry also on
 x86-64.

---
 dlls/ntdll/unix/signal_x86_64.c | 26 ++++++++++++++++++++++++--
 1 file changed, 24 insertions(+), 2 deletions(-)

diff --git a/dlls/ntdll/unix/signal_x86_64.c b/dlls/ntdll/unix/signal_x86_64.c
index 60d1fd341d9..188cbed50ef 100644
--- a/dlls/ntdll/unix/signal_x86_64.c
+++ b/dlls/ntdll/unix/signal_x86_64.c
@@ -847,11 +847,22 @@ static inline void set_sigcontext( const CONTEXT *context, ucontext_t *sigcontex
 }
 
 
+extern void clear_alignment_flag(void);
+__ASM_GLOBAL_FUNC( clear_alignment_flag,
+                   "pushfq\n\t"
+                   __ASM_CFI(".cfi_adjust_cfa_offset 8\n\t")
+                   "andl $~0x40000,(%rsp)\n\t"
+                   "popfq\n\t"
+                   __ASM_CFI(".cfi_adjust_cfa_offset -8\n\t")
+                   "ret" )
+
+
 /***********************************************************************
  *           init_handler
  */
 static inline ucontext_t *init_handler( void *sigcontext )
 {
+    clear_alignment_flag();
 #ifdef __linux__
     if (fs32_sel)
     {
@@ -859,8 +870,19 @@ static inline ucontext_t *init_handler( void *sigcontext )
         arch_prctl( ARCH_SET_FS, ((struct amd64_thread_data *)thread_data->cpu_data)->pthread_teb );
     }
 #elif defined __APPLE__
-    struct ntdll_thread_data *thread_data = (struct ntdll_thread_data *)&get_current_teb()->GdiTebBatch;
-    _thread_set_tsd_base( (uint64_t)((struct amd64_thread_data *)thread_data->cpu_data)->pthread_teb );
+    {
+        struct ntdll_thread_data *thread_data = (struct ntdll_thread_data *)&get_current_teb()->GdiTebBatch;
+        _thread_set_tsd_base( (uint64_t)((struct amd64_thread_data *)thread_data->cpu_data)->pthread_teb );
+
+        /* When in a syscall, CS will be the kernel's selector (0x07, SYSCALL_CS in xnu source)
+         * instead of the user selector (cs64_sel: 0x2b, USER64_CS).
+         * Fix up sigcontext so later code can compare it to cs64_sel.
+         *
+         * Only applies on Intel, not under Rosetta.
+         */
+        if (CS_sig((ucontext_t *)sigcontext) == 0x07 /* SYSCALL_CS */)
+            CS_sig((ucontext_t *)sigcontext) = cs64_sel;
+    }
 #endif
     return sigcontext;
 }
-- 
2.51.0


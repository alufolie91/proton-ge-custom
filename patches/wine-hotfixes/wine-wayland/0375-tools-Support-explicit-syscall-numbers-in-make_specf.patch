From 0fb6b630a18852a673cb9ed3d866a6ffdc4123f4 Mon Sep 17 00:00:00 2001
From: Alexandre Julliard <julliard@winehq.org>
Date: Thu, 5 Jun 2025 12:00:23 +0200
Subject: [PATCH 375/378] tools: Support explicit syscall numbers in
 make_specfiles.

---
 tools/make_specfiles | 45 +++++++++++++++++++++++++++++++++++++-------
 1 file changed, 38 insertions(+), 7 deletions(-)

diff --git a/tools/make_specfiles b/tools/make_specfiles
index 908b2371689..6ca9d8b53f7 100755
--- a/tools/make_specfiles
+++ b/tools/make_specfiles
@@ -331,15 +331,37 @@ sub get_syscalls_str($$@)
 {
     my $base = shift;
     my $custom_syscalls = shift;
-    my @syscalls = sort { $a->[0] cmp $b->[0] } @_;
-
+    my @syscalls = @_;
     my $ret = "";
-    for (my $i = 0; $i < @syscalls; $i++)
+    my @ids;
+
+    # assign ids
+
+    foreach my $syscall (@syscalls)
+    {
+        my $id = $syscall->[2];
+        $ids[$id] = $syscall->[0] if defined $id;
+    }
+    if (scalar @ids - $base > @syscalls)
+    {
+        printf STDERR "Syscall id 0x%x (%s) is too high (max 0x%x)\n",
+            $#ids, $ids[$#ids], $base + scalar @syscalls - 1;
+        exit 1;
+    }
+    my $next_id = $base;
+    foreach my $syscall (sort { $a->[0] cmp $b->[0] } @syscalls)
     {
-        my ($name, $args) = @{$syscalls[$i]};
+        next if defined $syscall->[2];
+        while (defined($ids[$next_id])) { $next_id++; }
+        $syscall->[2] = $next_id++;
+    }
+
+    foreach my $syscall (sort { $a->[2] <=> $b->[2] } @syscalls)
+    {
+        my ($name, $args, $id) = @{$syscall};
         my $suffix = "";
         $suffix = "_$name" if defined $custom_syscalls->{$name};
-        $ret .= sprintf " \\\n    SYSCALL_ENTRY%s( 0x%04x, %s, %u )", $suffix, $base + $i, $name, $args;
+        $ret .= sprintf " \\\n    SYSCALL_ENTRY%s( 0x%04x, %s, %u )", $suffix, $id, $name, $args;
     }
     return $ret;
 }
@@ -359,8 +381,17 @@ sub read_syscalls($)
         next unless $descr->{flags} =~ /-syscall/;
         next if $descr->{target} ne $func && defined $funcs{$descr->{target}};
         my ($args32, $args64) = get_args_size( $funcs{$func}->{args} );
-        push @syscalls32, [ $func, $args32 ] unless $descr->{flags} =~ /-arch=win64/;
-        push @syscalls64, [ $func, $args64 ] unless $descr->{flags} =~ /-arch=win32/;
+        my $id;
+        if ($descr->{flags} =~ /-syscall=(0[Xx][0-9a-fA-F]+)/)
+        {
+            $id = hex $1;
+        }
+        elsif ($descr->{flags} =~ /-syscall=(\d+)/)
+        {
+            $id = $1;
+        }
+        push @syscalls32, [ $func, $args32, $id ] unless $descr->{flags} =~ /-arch=win64/;
+        push @syscalls64, [ $func, $args64, $id ] unless $descr->{flags} =~ /-arch=win32/;
     }
     return (\@syscalls32, \@syscalls64);
 }
-- 
2.51.0


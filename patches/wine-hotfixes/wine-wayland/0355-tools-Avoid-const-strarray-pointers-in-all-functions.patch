From 64821acdceae6701401f279da53c9566827e61eb Mon Sep 17 00:00:00 2001
From: Alexandre Julliard <julliard@winehq.org>
Date: Wed, 26 Feb 2025 21:34:22 +0100
Subject: [PATCH 355/378] tools: Avoid const strarray pointers in all
 functions.

---
 tools/makedep.c          | 57 ++++++++++++++++++++--------------------
 tools/tools.h            | 10 +++----
 tools/widl/widl.c        |  2 +-
 tools/winebuild/import.c |  2 +-
 4 files changed, 36 insertions(+), 35 deletions(-)

diff --git a/tools/makedep.c b/tools/makedep.c
index eb3105104c9..84c3e02c275 100644
--- a/tools/makedep.c
+++ b/tools/makedep.c
@@ -356,14 +356,14 @@ static void output( const char *format, ... )
  *
  * Find a value in a name/value pair string array.
  */
-static const char *strarray_get_value( const struct strarray *array, const char *name )
+static const char *strarray_get_value( struct strarray array, const char *name )
 {
-    int pos, res, min = 0, max = array->count / 2 - 1;
+    int pos, res, min = 0, max = array.count / 2 - 1;
 
     while (min <= max)
     {
         pos = (min + max) / 2;
-        if (!(res = strcmp( array->str[pos * 2], name ))) return array->str[pos * 2 + 1];
+        if (!(res = strcmp( array.str[pos * 2], name ))) return array.str[pos * 2 + 1];
         if (res < 0) min = pos + 1;
         else max = pos - 1;
     }
@@ -1473,7 +1473,7 @@ static struct file *open_include_file( const struct makefile *make, struct incl_
     if ((file = open_local_generated_file( make, pFile, "-client-protocol.h", ".xml" ))) return file;
 
     /* check for extra targets */
-    if (strarray_exists( &make->extra_targets, pFile->name ))
+    if (strarray_exists( make->extra_targets, pFile->name ))
     {
         pFile->sourcename = src_dir_path( make, pFile->name );
         pFile->filename = obj_dir_path( make, pFile->name );
@@ -1694,9 +1694,9 @@ static const char *get_make_variable( const struct makefile *make, const char *n
 {
     const char *ret;
 
-    if ((ret = strarray_get_value( &cmdline_vars, name ))) return ret;
-    if ((ret = strarray_get_value( &make->vars, name ))) return ret;
-    if (top_makefile && (ret = strarray_get_value( &top_makefile->vars, name ))) return ret;
+    if ((ret = strarray_get_value( cmdline_vars, name ))) return ret;
+    if ((ret = strarray_get_value( make->vars, name ))) return ret;
+    if (top_makefile && (ret = strarray_get_value( top_makefile->vars, name ))) return ret;
     return NULL;
 }
 
@@ -2109,7 +2109,7 @@ static struct strarray get_local_dependencies( const struct makefile *make, cons
 
     for (i = 0; i < deps.count; i++)
     {
-        if (strarray_exists( &targets, deps.str[i] ))
+        if (strarray_exists( targets, deps.str[i] ))
             deps.str[i] = obj_dir_path( make, deps.str[i] );
         else
             deps.str[i] = src_dir_path( make, deps.str[i] );
@@ -2178,7 +2178,7 @@ static int needs_delay_lib( const struct makefile *make, unsigned int arch )
 {
     if (delay_load_flags[arch]) return 0;
     if (!make->importlib) return 0;
-    return strarray_exists( &delay_import_libs, make->importlib );
+    return strarray_exists( delay_import_libs, make->importlib );
 }
 
 
@@ -2257,7 +2257,7 @@ static const char *get_crt_define( const struct makefile *make )
 
     if (!crt_dll)
     {
-        if (strarray_exists( &make->extradllflags, "-nodefaultlibs" )) return "-D_MSVCR_VER=0";
+        if (strarray_exists( make->extradllflags, "-nodefaultlibs" )) return "-D_MSVCR_VER=0";
         if (!(crt_dll = get_default_crt( make ))) crt_dll = make->module;
     }
     if (!strncmp( crt_dll, "ucrt", 4 )) return "-D_UCRT";
@@ -2361,9 +2361,9 @@ static void add_install_rule( struct makefile *make, const char *target, unsigne
 
     for (i = 0; i < NB_INSTALL_RULES; i++)
     {
-        if (strarray_exists( &make->install[i], target ) ||
-            strarray_exists( &top_install[i], make->obj_dir ) ||
-            strarray_exists( &top_install[i], obj_dir_path( make, target )))
+        if (strarray_exists( make->install[i], target ) ||
+            strarray_exists( top_install[i], make->obj_dir ) ||
+            strarray_exists( top_install[i], obj_dir_path( make, target )))
         {
             strarray_add( &make->install_rules[i], file );
             strarray_add( &make->install_rules[i], dest );
@@ -3134,8 +3134,8 @@ static void output_source_testdll( struct makefile *make, struct incl_file *sour
     if (!imports.count) imports = make->imports;
     strarray_addall( &dll_flags, make->extradllflags );
     strarray_addall( &dll_flags, get_expanded_file_local_var( make, obj, "EXTRADLLFLAGS" ));
-    default_imports = get_default_imports( make, imports, strarray_exists( &dll_flags, "-nodefaultlibs" ));
-    if (strarray_exists( &dll_flags, "-mconsole" )) ext = ".exe";
+    default_imports = get_default_imports( make, imports, strarray_exists( dll_flags, "-nodefaultlibs" ));
+    if (strarray_exists( dll_flags, "-mconsole" )) ext = ".exe";
 
     for (arch = 0; arch < archs.count; arch++)
     {
@@ -3472,7 +3472,7 @@ static void output_module( struct makefile *make, unsigned int arch )
     if (!(module = get_expanded_arch_var( make, "MODULE", arch ))) module = make->module;
     if (!make->is_exe)
     {
-        if (make->data_only || strarray_exists( &make->extradllflags, "-Wl,--subsystem,native" ))
+        if (make->data_only || strarray_exists( make->extradllflags, "-Wl,--subsystem,native" ))
         {
             /* spec file is optional */
             struct incl_file *spec = find_src_file( make, replace_extension( module, ".dll", ".spec" ));
@@ -3487,7 +3487,7 @@ static void output_module( struct makefile *make, unsigned int arch )
 
         module_name = arch_module_name( module, arch );
         default_imports = get_default_imports( make, imports,
-                                               strarray_exists( &make->extradllflags, "-nodefaultlibs" ));
+                                               strarray_exists( make->extradllflags, "-nodefaultlibs" ));
 
         strarray_addall( &all_libs, add_import_libs( make, &dep_libs, imports, IMPORT_TYPE_DIRECT, arch ));
         strarray_addall( &all_libs, add_import_libs( make, &dep_libs, make->delayimports, IMPORT_TYPE_DELAYED, arch ));
@@ -3761,7 +3761,7 @@ static void output_programs( struct makefile *make )
         struct strarray symlinks = get_expanded_file_local_var( make, make->programs.str[i], "SYMLINKS" );
 
         if (!objs.count) objs = make->object_files[arch];
-        if (!strarray_exists( &all_libs, "-nodefaultlibs" ))
+        if (!strarray_exists( all_libs, "-nodefaultlibs" ))
         {
             strarray_addall( &all_libs, get_expanded_make_var_array( make, "UNIX_LIBS" ));
             strarray_addall( &all_libs, libs );
@@ -3971,7 +3971,7 @@ static void output_sources( struct makefile *make )
             {
                 if (!submakes[i]->testdll) continue;
                 if (submakes[i]->disabled[arch]) continue;
-                if (enable_tests.count && !strarray_exists( &enable_tests, submakes[i]->testdll )) continue;
+                if (enable_tests.count && !strarray_exists( enable_tests, submakes[i]->testdll )) continue;
                 strarray_add( &make->res_files[arch],
                               strmake( "%s%s", arch_dirs[arch],
                                        replace_extension( submakes[i]->testdll, ".dll", "_test.res" )));
@@ -4022,7 +4022,7 @@ static void output_sources( struct makefile *make )
                           strmake( "S$(bindir)/%s", make->scripts.str[i] ));
 
     for (i = 0; i < make->extra_targets.count; i++)
-        if (strarray_exists( &make->dependencies, obj_dir_path( make, make->extra_targets.str[i] )))
+        if (strarray_exists( make->dependencies, obj_dir_path( make, make->extra_targets.str[i] )))
             strarray_add( &make->clean_files, make->extra_targets.str[i] );
         else
             strarray_add( &make->all_targets[0], make->extra_targets.str[i] );
@@ -4279,7 +4279,7 @@ static void output_gitignore( const char *dest, struct strarray files )
 static void output_stub_makefile( struct makefile *make )
 {
     struct strarray targets = empty_strarray;
-    const char *make_var = strarray_get_value( &top_makefile->vars, "MAKE" );
+    const char *make_var = strarray_get_value( top_makefile->vars, "MAKE" );
     unsigned int i, arch;
 
     for (arch = 0; arch < archs.count; arch++)
@@ -4465,16 +4465,17 @@ static void load_sources( struct makefile *make )
 
     if (make->obj_dir)
     {
-        make->disabled[0] = strarray_exists( &disabled_dirs[0], make->obj_dir );
+        make->disabled[0] = strarray_exists( disabled_dirs[0], make->obj_dir );
         for (arch = 1; arch < archs.count; arch++)
-            make->disabled[arch] = make->disabled[0] || strarray_exists( &disabled_dirs[arch], make->obj_dir );
+            make->disabled[arch] = make->disabled[0] || strarray_exists( disabled_dirs[arch], make->obj_dir );
     }
-    make->is_win16   = strarray_exists( &make->extradllflags, "-m16" );
-    make->data_only  = strarray_exists( &make->extradllflags, "-Wb,--data-only" );
+
+    make->is_win16   = strarray_exists( make->extradllflags, "-m16" );
+    make->data_only  = strarray_exists( make->extradllflags, "-Wb,--data-only" );
     make->use_msvcrt = (make->module || make->testdll || make->is_win16) &&
-                       !strarray_exists( &make->extradllflags, "-mcygwin" );
-    make->is_exe     = strarray_exists( &make->extradllflags, "-mconsole" ) ||
-                       strarray_exists( &make->extradllflags, "-mwindows" );
+                       !strarray_exists( make->extradllflags, "-mcygwin" );
+    make->is_exe     = strarray_exists( make->extradllflags, "-mconsole" ) ||
+                       strarray_exists( make->extradllflags, "-mwindows" );
 
     if (make->use_msvcrt) strarray_add_uniq( &make->extradllflags, "-mno-cygwin" );
 
diff --git a/tools/tools.h b/tools/tools.h
index b840a85b2e5..319aff77da7 100644
--- a/tools/tools.h
+++ b/tools/tools.h
@@ -193,17 +193,17 @@ static inline void strarray_addall( struct strarray *array, struct strarray adde
     for (i = 0; i < added.count; i++) strarray_add( array, added.str[i] );
 }
 
-static inline int strarray_exists( const struct strarray *array, const char *str )
+static inline int strarray_exists( struct strarray array, const char *str )
 {
     unsigned int i;
 
-    for (i = 0; i < array->count; i++) if (!strcmp( array->str[i], str )) return 1;
+    for (i = 0; i < array.count; i++) if (!strcmp( array.str[i], str )) return 1;
     return 0;
 }
 
 static inline void strarray_add_uniq( struct strarray *array, const char *str )
 {
-    if (!strarray_exists( array, str )) strarray_add( array, str );
+    if (!strarray_exists( *array, str )) strarray_add( array, str );
 }
 
 static inline void strarray_addall_uniq( struct strarray *array, struct strarray added )
@@ -257,12 +257,12 @@ static inline void strarray_qsort( struct strarray *array, int (*func)(const cha
     if (array->count) qsort( array->str, array->count, sizeof(*array->str), (void *)func );
 }
 
-static inline const char *strarray_bsearch( const struct strarray *array, const char *str,
+static inline const char *strarray_bsearch( struct strarray array, const char *str,
                                             int (*func)(const char **, const char **) )
 {
     char **res = NULL;
 
-    if (array->count) res = bsearch( &str, array->str, array->count, sizeof(*array->str), (void *)func );
+    if (array.count) res = bsearch( &str, array.str, array.count, sizeof(*array.str), (void *)func );
     return res ? *res : NULL;
 }
 
diff --git a/tools/widl/widl.c b/tools/widl/widl.c
index e92f9a85497..b1ede89934f 100644
--- a/tools/widl/widl.c
+++ b/tools/widl/widl.c
@@ -365,7 +365,7 @@ void write_dlldata(const statement_list_t *stmts)
     fclose(dlldata);
   }
 
-  if (strarray_exists( &filenames, proxy_token ))
+  if (strarray_exists( filenames, proxy_token ))
       /* We're already in the list, no need to regenerate this file.  */
       return;
 
diff --git a/tools/winebuild/import.c b/tools/winebuild/import.c
index 6aee0fa98f8..697fec2d583 100644
--- a/tools/winebuild/import.c
+++ b/tools/winebuild/import.c
@@ -182,7 +182,7 @@ static inline void remove_name( struct strarray *table, unsigned int idx )
 /* locate a name in a (sorted) list */
 static inline const char *find_name( const char *name, struct strarray table )
 {
-    return strarray_bsearch( &table, name, name_cmp );
+    return strarray_bsearch( table, name, name_cmp );
 }
 
 /* sort a name table */
-- 
2.51.0


From 8ab109f4cbfc95505f82e81478deb22eea113597 Mon Sep 17 00:00:00 2001
From: Etaash Mathamsetty <etaash.mathamsetty@gmail.com>
Date: Tue, 5 Aug 2025 13:42:45 -0400
Subject: [PATCH 233/327] winewayland: Add support for display make.

---
 dlls/winewayland.drv/display.c        | 12 ++++++++++++
 dlls/winewayland.drv/wayland_output.c |  9 +++++++++
 dlls/winewayland.drv/waylanddrv.h     |  1 +
 3 files changed, 22 insertions(+)

diff --git a/dlls/winewayland.drv/display.c b/dlls/winewayland.drv/display.c
index e8fcd015382..5714080be0d 100644
--- a/dlls/winewayland.drv/display.c
+++ b/dlls/winewayland.drv/display.c
@@ -277,6 +277,7 @@ static UINT get_edid(const struct output_info *output_info, unsigned char **data
     struct wayland_output_mode *mode = output_info->output->current_mode;
     const struct wayland_primaries *primaries = &output_info->output->primaries;
     const char *model = output_info->output->model;
+    const char *make = output_info->output->make;
 
     mwidth = output_info->output->width_mm;
     mheight = output_info->output->height_mm;
@@ -295,6 +296,17 @@ static UINT get_edid(const struct output_info *output_info, unsigned char **data
     if (!data) return 0;
 
     *(uint64_t*)data = 0x00ffffffffffff00;
+    if (make && strlen(make) >= 3)
+    {
+        unsigned char l[3];
+        for (int i = 0; i < 3; i++)
+        {
+            l[i] = tolower(make[i]) - 'a' + 1;
+            if (l[i] > 26) l[i] = 26;
+        }
+        data[8] = ((l[0] & 0x1f) << 2) | ((l[1] & 0x18) >> 3);
+        data[9] = ((l[1] & 0x7) << 5) | (l[2] & 0x1f);
+    }
     if (model && strlen(model) >= 2)
     {
         data[10] = model[0];
diff --git a/dlls/winewayland.drv/wayland_output.c b/dlls/winewayland.drv/wayland_output.c
index e2af42de875..5d4c9fb7a44 100644
--- a/dlls/winewayland.drv/wayland_output.c
+++ b/dlls/winewayland.drv/wayland_output.c
@@ -181,10 +181,12 @@ static void wayland_output_done(struct wayland_output *output)
     if (output->pending_flags & WAYLAND_OUTPUT_CHANGED_GEOMETRY)
     {
         free(output->current.model);
+        free(output->current.make);
         output->current.transform = output->pending.transform;
         output->current.width_mm = output->pending.width_mm;
         output->current.height_mm = output->pending.height_mm;
         output->current.model = output->pending.model;
+        output->current.make = output->pending.make;
     }
 
 
@@ -243,6 +245,7 @@ static void output_handle_geometry(void *data, struct wl_output *wl_output,
     output->pending.width_mm = physical_width;
     output->pending.height_mm = physical_height;
     output->pending.model = strdup(model);
+    output->pending.make = strdup(make);
 
     output->pending_flags |= WAYLAND_OUTPUT_CHANGED_GEOMETRY;
 }
@@ -603,6 +606,12 @@ BOOL wayland_output_create(uint32_t id, uint32_t version)
         goto err;
     }
 
+    if (!(output->current.make = strdup("Wine")))
+    {
+        ERR("Couldn't allocate space for output make\n");
+        goto err;
+    }
+
     if (process_wayland.zxdg_output_manager_v1)
         wayland_output_use_xdg_extension(output);
     if (process_wayland.wp_color_manager_v1)
diff --git a/dlls/winewayland.drv/waylanddrv.h b/dlls/winewayland.drv/waylanddrv.h
index b650be2deb9..cdcd05a939b 100644
--- a/dlls/winewayland.drv/waylanddrv.h
+++ b/dlls/winewayland.drv/waylanddrv.h
@@ -249,6 +249,7 @@ struct wayland_output_state
     uint32_t max_fall;
     uint32_t max_cll;
     char *name;
+    char *make;
     char *model;
     int logical_x, logical_y;
     int logical_w, logical_h;
-- 
2.51.0


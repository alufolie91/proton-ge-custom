From c773698379b01f5079bb53f887b7c67ce10b684b Mon Sep 17 00:00:00 2001
From: Alexandre Julliard <julliard@winehq.org>
Date: Mon, 12 May 2025 13:24:55 +0200
Subject: [PATCH 374/378] tools: Add support for syscalls with a custom entry
 point.

---
 dlls/ntdll/ntsyscalls.h     | 12 ++++++------
 dlls/win32u/win32syscalls.h |  2 --
 tools/make_specfiles        | 25 +++++++++++++++----------
 3 files changed, 21 insertions(+), 18 deletions(-)

diff --git a/dlls/ntdll/ntsyscalls.h b/dlls/ntdll/ntsyscalls.h
index 42094a9fd59..789b449c10d 100644
--- a/dlls/ntdll/ntsyscalls.h
+++ b/dlls/ntdll/ntsyscalls.h
@@ -139,7 +139,7 @@
     SYSCALL_ENTRY( 0x0087, NtQueryInformationAtom, 20 ) \
     SYSCALL_ENTRY( 0x0088, NtQueryInformationFile, 20 ) \
     SYSCALL_ENTRY( 0x0089, NtQueryInformationJobObject, 20 ) \
-    SYSCALL_ENTRY( 0x008a, NtQueryInformationProcess, 20 ) \
+    SYSCALL_ENTRY_NtQueryInformationProcess( 0x008a, NtQueryInformationProcess, 20 ) \
     SYSCALL_ENTRY( 0x008b, NtQueryInformationThread, 20 ) \
     SYSCALL_ENTRY( 0x008c, NtQueryInformationToken, 20 ) \
     SYSCALL_ENTRY( 0x008d, NtQueryInstallUILanguage, 4 ) \
@@ -158,7 +158,7 @@
     SYSCALL_ENTRY( 0x009a, NtQuerySystemEnvironmentValueEx, 20 ) \
     SYSCALL_ENTRY( 0x009b, NtQuerySystemInformation, 16 ) \
     SYSCALL_ENTRY( 0x009c, NtQuerySystemInformationEx, 24 ) \
-    SYSCALL_ENTRY( 0x009d, NtQuerySystemTime, 4 ) \
+    SYSCALL_ENTRY_NtQuerySystemTime( 0x009d, NtQuerySystemTime, 4 ) \
     SYSCALL_ENTRY( 0x009e, NtQueryTimer, 20 ) \
     SYSCALL_ENTRY( 0x009f, NtQueryTimerResolution, 12 ) \
     SYSCALL_ENTRY( 0x00a0, NtQueryValueKey, 24 ) \
@@ -250,7 +250,6 @@
     SYSCALL_ENTRY( 0x00f6, NtYieldExecution, 0 ) \
     SYSCALL_ENTRY( 0x00f7, wine_nt_to_unix_file_name, 16 ) \
     SYSCALL_ENTRY( 0x00f8, wine_unix_to_nt_file_name, 12 )
-
 #ifdef _WIN64
 #define ALL_SYSCALLS \
     SYSCALL_ENTRY( 0x0000, NtAcceptConnectPort, 48 ) \
@@ -391,7 +390,7 @@
     SYSCALL_ENTRY( 0x0087, NtQueryInformationAtom, 40 ) \
     SYSCALL_ENTRY( 0x0088, NtQueryInformationFile, 40 ) \
     SYSCALL_ENTRY( 0x0089, NtQueryInformationJobObject, 40 ) \
-    SYSCALL_ENTRY( 0x008a, NtQueryInformationProcess, 40 ) \
+    SYSCALL_ENTRY_NtQueryInformationProcess( 0x008a, NtQueryInformationProcess, 40 ) \
     SYSCALL_ENTRY( 0x008b, NtQueryInformationThread, 40 ) \
     SYSCALL_ENTRY( 0x008c, NtQueryInformationToken, 40 ) \
     SYSCALL_ENTRY( 0x008d, NtQueryInstallUILanguage, 8 ) \
@@ -410,7 +409,7 @@
     SYSCALL_ENTRY( 0x009a, NtQuerySystemEnvironmentValueEx, 40 ) \
     SYSCALL_ENTRY( 0x009b, NtQuerySystemInformation, 32 ) \
     SYSCALL_ENTRY( 0x009c, NtQuerySystemInformationEx, 48 ) \
-    SYSCALL_ENTRY( 0x009d, NtQuerySystemTime, 8 ) \
+    SYSCALL_ENTRY_NtQuerySystemTime( 0x009d, NtQuerySystemTime, 8 ) \
     SYSCALL_ENTRY( 0x009e, NtQueryTimer, 40 ) \
     SYSCALL_ENTRY( 0x009f, NtQueryTimerResolution, 24 ) \
     SYSCALL_ENTRY( 0x00a0, NtQueryValueKey, 48 ) \
@@ -496,7 +495,8 @@
     SYSCALL_ENTRY( 0x00f0, NtYieldExecution, 0 ) \
     SYSCALL_ENTRY( 0x00f1, wine_nt_to_unix_file_name, 32 ) \
     SYSCALL_ENTRY( 0x00f2, wine_unix_to_nt_file_name, 24 )
-
 #else
 #define ALL_SYSCALLS ALL_SYSCALLS32
 #endif
+#define SYSCALL_ENTRY_NtQueryInformationProcess(id,name,args) SYSCALL_ENTRY(id,name,args)
+#define SYSCALL_ENTRY_NtQuerySystemTime(id,name,args) SYSCALL_ENTRY(id,name,args)
diff --git a/dlls/win32u/win32syscalls.h b/dlls/win32u/win32syscalls.h
index 9493695e79a..57d840afc95 100644
--- a/dlls/win32u/win32syscalls.h
+++ b/dlls/win32u/win32syscalls.h
@@ -445,7 +445,6 @@
     SYSCALL_ENTRY( 0x11b9, NtUserWindowFromPoint, 8 ) \
     SYSCALL_ENTRY( 0x11ba, __wine_get_file_outline_text_metric, 16 ) \
     SYSCALL_ENTRY( 0x11bb, __wine_get_icm_profile, 16 )
-
 #ifdef _WIN64
 #define ALL_SYSCALLS \
     SYSCALL_ENTRY( 0x1000, NtGdiAbortDoc, 8 ) \
@@ -892,7 +891,6 @@
     SYSCALL_ENTRY( 0x11b9, NtUserWindowFromPoint, 16 ) \
     SYSCALL_ENTRY( 0x11ba, __wine_get_file_outline_text_metric, 32 ) \
     SYSCALL_ENTRY( 0x11bb, __wine_get_icm_profile, 32 )
-
 #else
 #define ALL_SYSCALLS ALL_SYSCALLS32
 #endif
diff --git a/tools/make_specfiles b/tools/make_specfiles
index 650bec6cf1c..908b2371689 100755
--- a/tools/make_specfiles
+++ b/tools/make_specfiles
@@ -327,18 +327,21 @@ sub get_args_size($)
     return ($ret32, $ret64);
 }
 
-sub get_syscalls_str($@)
+sub get_syscalls_str($$@)
 {
     my $base = shift;
+    my $custom_syscalls = shift;
     my @syscalls = sort { $a->[0] cmp $b->[0] } @_;
 
     my $ret = "";
     for (my $i = 0; $i < @syscalls; $i++)
     {
         my ($name, $args) = @{$syscalls[$i]};
-        $ret .= sprintf " \\\n    SYSCALL_ENTRY( 0x%04x, %s, %u )", $base + $i, $name, $args;
+        my $suffix = "";
+        $suffix = "_$name" if defined $custom_syscalls->{$name};
+        $ret .= sprintf " \\\n    SYSCALL_ENTRY%s( 0x%04x, %s, %u )", $suffix, $base + $i, $name, $args;
     }
-    return $ret . "\n";
+    return $ret;
 }
 
 sub read_syscalls($)
@@ -362,19 +365,21 @@ sub read_syscalls($)
     return (\@syscalls32, \@syscalls64);
 }
 
-sub update_syscalls($$$)
+sub update_syscalls($$$$)
 {
-    my ($spec, $file, $base) = @_;
+    my ($spec, $file, $base, $custom) = @_;
     my ($syscalls32, $syscalls64) = read_syscalls( $spec );
+    my @defines = map { sprintf "#define SYSCALL_ENTRY_%s(id,name,args) SYSCALL_ENTRY(id,name,args)\n", $_; } sort keys %{$custom};
 
     output_file( $file,
                  "/* Automatically generated by tools/make_specfiles */\n" .
-                 "\n#define ALL_SYSCALLS32" . get_syscalls_str( $base, @{$syscalls32} ) .
+                 "\n#define ALL_SYSCALLS32" . get_syscalls_str( $base, $custom, @{$syscalls32} ) .
                  "\n#ifdef _WIN64" .
-                 "\n#define ALL_SYSCALLS" . get_syscalls_str( $base, @{$syscalls64} ) .
+                 "\n#define ALL_SYSCALLS" . get_syscalls_str( $base, $custom, @{$syscalls64} ) .
                  "\n#else" .
                  "\n#define ALL_SYSCALLS ALL_SYSCALLS32" .
-                 "\n#endif\n" );
+                 "\n#endif\n" .
+                 join "", @defines );
 }
 
 sub sync_spec_files(@)
@@ -390,5 +395,5 @@ foreach my $group (@dll_groups)
     sync_spec_files( @{$group} );
 }
 
-update_syscalls( "ntdll", "dlls/ntdll/ntsyscalls.h", 0 );
-update_syscalls( "win32u", "dlls/win32u/win32syscalls.h", 0x1000 );
+update_syscalls( "ntdll", "dlls/ntdll/ntsyscalls.h", 0, { NtQueryInformationProcess => 1, NtQuerySystemTime => 1 } );
+update_syscalls( "win32u", "dlls/win32u/win32syscalls.h", 0x1000, {} );
-- 
2.51.0


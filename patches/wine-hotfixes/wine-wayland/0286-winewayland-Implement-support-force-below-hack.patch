From 7f0ed80539bc97551055b4351672fb822f687892 Mon Sep 17 00:00:00 2001
From: Etaash Mathamsetty
 <45927311+Etaash-mathamsetty@users.noreply.github.com>
Date: Wed, 6 Aug 2025 19:53:18 -0400
Subject: [PATCH 286/365] winewayland: Implement support force below hack.

---
 dlls/winewayland.drv/wayland_surface.c | 38 ++++++++------------------
 dlls/winewayland.drv/waylanddrv.h      |  6 ++--
 dlls/winewayland.drv/window.c          | 38 +++++++++++++++++++++++++-
 3 files changed, 52 insertions(+), 30 deletions(-)

diff --git a/dlls/winewayland.drv/wayland_surface.c b/dlls/winewayland.drv/wayland_surface.c
index 0b094355c3d..c39cc8b7243 100644
--- a/dlls/winewayland.drv/wayland_surface.c
+++ b/dlls/winewayland.drv/wayland_surface.c
@@ -271,12 +271,6 @@ void wayland_surface_destroy(struct wayland_surface *surface)
 
     wayland_surface_clear_role(surface);
 
-    if (surface->xdg_activation_token_v1)
-    {
-        xdg_activation_token_v1_destroy(surface->xdg_activation_token_v1);
-        surface->xdg_activation_token_v1 = NULL;
-    }
-
     if (surface->wp_fractional_scale_v1)
     {
         wp_fractional_scale_v1_destroy(surface->wp_fractional_scale_v1);
@@ -1386,19 +1380,17 @@ static void xdg_activation_token_handle_done(void *user_data,
 {
     HWND hwnd = user_data;
     struct wayland_win_data *data;
-    struct wayland_surface *surface;
 
 
     if ((data = wayland_win_data_get(hwnd)))
     {
-        if ((surface = data->wayland_surface))
-        {
-            xdg_activation_v1_activate(process_wayland.xdg_activation_v1, token, surface->wl_surface);
-            xdg_activation_token_v1_destroy(surface->xdg_activation_token_v1);
-            surface->xdg_activation_token_v1 = NULL;
-        }
+        if (data->wayland_surface)
+            xdg_activation_v1_activate(process_wayland.xdg_activation_v1,
+                                       token, data->wayland_surface->wl_surface);
         wayland_win_data_release(data);
     }
+
+    xdg_activation_token_v1_destroy(xdg_activation_token_v1);
 }
 
 const static struct xdg_activation_token_v1_listener xdg_activation_listener = {
@@ -1407,29 +1399,23 @@ const static struct xdg_activation_token_v1_listener xdg_activation_listener = {
 
 void wayland_surface_set_activation(struct wayland_surface *surface, BOOL activate)
 {
+    struct xdg_activation_token_v1 *xdg_activation_token_v1;
     assert(surface);
 
-    if (!activate && surface->xdg_activation_token_v1)
-    {
-        xdg_activation_token_v1_destroy(surface->xdg_activation_token_v1);
-        surface->xdg_activation_token_v1 = NULL;
-        return;
-    }
-
-    if (activate && !surface->xdg_activation_token_v1 && process_wayland.xdg_activation_v1)
+    if (activate && process_wayland.xdg_activation_v1)
     {
-        surface->xdg_activation_token_v1 =
+        xdg_activation_token_v1 =
             xdg_activation_v1_get_activation_token(process_wayland.xdg_activation_v1);
 
-        if (!surface->xdg_activation_token_v1)
+        if (!xdg_activation_token_v1)
         {
             ERR("Failed to create activation token!\n");
             return;
         }
 
-        xdg_activation_token_v1_add_listener(surface->xdg_activation_token_v1,
+        xdg_activation_token_v1_add_listener(xdg_activation_token_v1,
                                              &xdg_activation_listener, surface->hwnd);
-        xdg_activation_token_v1_set_surface(surface->xdg_activation_token_v1, surface->wl_surface);
-        xdg_activation_token_v1_commit(surface->xdg_activation_token_v1);
+        xdg_activation_token_v1_set_surface(xdg_activation_token_v1, surface->wl_surface);
+        xdg_activation_token_v1_commit(xdg_activation_token_v1);
     }
 }
diff --git a/dlls/winewayland.drv/waylanddrv.h b/dlls/winewayland.drv/waylanddrv.h
index 894e06dc4cc..017326bc7f3 100644
--- a/dlls/winewayland.drv/waylanddrv.h
+++ b/dlls/winewayland.drv/waylanddrv.h
@@ -80,7 +80,8 @@ enum wayland_surface_config_state
     WAYLAND_SURFACE_CONFIG_STATE_MAXIMIZED = (1 << 0),
     WAYLAND_SURFACE_CONFIG_STATE_RESIZING = (1 << 1),
     WAYLAND_SURFACE_CONFIG_STATE_TILED = (1 << 2),
-    WAYLAND_SURFACE_CONFIG_STATE_FULLSCREEN = (1 << 3)
+    WAYLAND_SURFACE_CONFIG_STATE_FULLSCREEN = (1 << 3),
+    WAYLAND_SURFACE_CONFIG_STATE_MINIMIZED = (1 << 4)
 };
 
 enum wayland_surface_role
@@ -325,8 +326,6 @@ struct wayland_surface
     struct wl_output *requested_output;
     struct wp_viewport *wp_viewport;
     struct wp_fractional_scale_v1 *wp_fractional_scale_v1;
-    /* FIXME: should this be moved? */
-    struct xdg_activation_token_v1 *xdg_activation_token_v1;
 
     enum wayland_surface_role role;
     union
@@ -435,6 +434,7 @@ struct wayland_win_data
     /* window rects, relative to parent client area */
     struct window_rects rects;
     BOOL is_fullscreen;
+    BOOL force_below_hack;
     BOOL managed;
 };
 
diff --git a/dlls/winewayland.drv/window.c b/dlls/winewayland.drv/window.c
index 474df01fe63..85a7d32b92d 100644
--- a/dlls/winewayland.drv/window.c
+++ b/dlls/winewayland.drv/window.c
@@ -160,8 +160,12 @@ static void wayland_win_data_get_config(struct wayland_win_data *data,
 
     TRACE("window=%s style=%#lx\n", wine_dbgstr_rect(&conf->rect), (long)style);
 
+    if (data->force_below_hack)
+    {
+        window_state |= WAYLAND_SURFACE_CONFIG_STATE_MINIMIZED;
+    }
     /* The fullscreen state is implied by the window position and style. */
-    if (data->is_fullscreen)
+    else if (data->is_fullscreen)
     {
         if ((style & WS_MAXIMIZE) && (style & WS_CAPTION) == WS_CAPTION)
             window_state |= WAYLAND_SURFACE_CONFIG_STATE_MAXIMIZED;
@@ -281,6 +285,12 @@ static void wayland_surface_update_state_toplevel(struct wayland_surface *surfac
             surface->requested_output = output;
             pthread_mutex_unlock(&process_wayland.output_mutex);
         }
+        if ((surface->window.state & WAYLAND_SURFACE_CONFIG_STATE_MINIMIZED) &&
+            !(surface->current.state & WAYLAND_SURFACE_CONFIG_STATE_MINIMIZED))
+        {
+            xdg_toplevel_set_minimized(surface->xdg_toplevel);
+            surface->requested_output = NULL;
+        }
     }
     else
     {
@@ -450,6 +460,22 @@ static HICON get_window_icon(HWND hwnd, UINT type, HICON icon, ICONINFO *ret)
     return icon;
 }
 
+static int use_force_below_hack(void)
+{
+    static int cached = -1;
+
+    if (cached == -1)
+    {
+        char const *sgi = getenv( "SteamGameId" );
+
+        cached = sgi && (
+            !strcmp(sgi, "1293830")
+            || !strcmp(sgi, "1551360")
+        );
+    }
+    return cached;
+}
+
 /***********************************************************************
  *           WAYLAND_WindowPosChanged
  */
@@ -477,6 +503,16 @@ void WAYLAND_WindowPosChanged(HWND hwnd, HWND insert_after, HWND owner_hint, UIN
     data->is_fullscreen = fullscreen;
     data->managed = managed;
 
+    if (use_force_below_hack())
+    {
+        if (insert_after != HWND_BOTTOM && insert_after != HWND_NOTOPMOST
+            && insert_after != HWND_TOP && insert_after != HWND_TOPMOST)
+        {
+            WARN( "hwnd %p setting force_below_hack.\n", hwnd );
+            data->force_below_hack = TRUE;
+        }
+    }
+
     if (!surface)
     {
         if ((client = data->client_surface))
-- 
2.50.1


From 036266840cacb2fa0b382bb43d6b424aad921c16 Mon Sep 17 00:00:00 2001
From: Etaash Mathamsetty <etaash.mathamsetty@gmail.com>
Date: Mon, 4 Aug 2025 13:21:51 -0400
Subject: [PATCH 237/365] winewayland: Do not rely on enter and leave events.

These don't work reliably
---
 dlls/winewayland.drv/wayland_surface.c | 58 ++++----------------------
 dlls/winewayland.drv/waylanddrv.h      |  2 +-
 dlls/winewayland.drv/window.c          |  2 +-
 3 files changed, 9 insertions(+), 53 deletions(-)

diff --git a/dlls/winewayland.drv/wayland_surface.c b/dlls/winewayland.drv/wayland_surface.c
index c52f9055b21..0b094355c3d 100644
--- a/dlls/winewayland.drv/wayland_surface.c
+++ b/dlls/winewayland.drv/wayland_surface.c
@@ -168,56 +168,12 @@ static const struct wp_fractional_scale_v1_listener wp_fractional_scale_listener
 
 static void wl_surface_handle_enter(void *user_data, struct wl_surface *wl_surface, struct wl_output *wl_output)
 {
-    struct wayland_win_data *data;
-    struct wayland_output *output;
-    HWND hwnd = user_data;
-
-    if ((data = wayland_win_data_get(hwnd)))
-    {
-        if (data->wayland_surface)
-        {
-            pthread_mutex_lock(&process_wayland.output_mutex);
-            wl_list_for_each(output, &process_wayland.output_list, link)
-            {
-                if (output->wl_output == wl_output)
-                {
-                    TRACE("Setting output %p for surface %p\n", wl_output, data->wayland_surface);
-                    data->wayland_surface->wl_output = wl_output;
-                    break;
-                }
-            }
-            pthread_mutex_unlock(&process_wayland.output_mutex);
-        }
-
-        wayland_win_data_release(data);
-    }
+    TRACE("surface %p output %p\n", wl_surface, wl_output);
 }
 
-static void wl_surface_handle_leave(void *user_data, struct wl_surface *surface, struct wl_output *wl_output)
+static void wl_surface_handle_leave(void *user_data, struct wl_surface *wl_surface, struct wl_output *wl_output)
 {
-    struct wayland_win_data *data;
-    struct wayland_output *output;
-    HWND hwnd = user_data;
-
-    if ((data = wayland_win_data_get(hwnd)))
-    {
-        if (data->wayland_surface)
-        {
-            pthread_mutex_lock(&process_wayland.output_mutex);
-            wl_list_for_each(output, &process_wayland.output_list, link)
-            {
-                if (output->wl_output == wl_output)
-                {
-                    TRACE("Clearing output %p for surface %p\n", wl_output, data->wayland_surface);
-                    data->wayland_surface->wl_output = NULL;
-                    break;
-                }
-            }
-            pthread_mutex_unlock(&process_wayland.output_mutex);
-        }
-
-        wayland_win_data_release(data);
-    }
+    TRACE("surface %p output %p\n", wl_surface, wl_output);
 }
 
 static const struct wl_surface_listener wl_surface_listener =
@@ -710,10 +666,10 @@ static void wayland_surface_reconfigure_geometry(struct wayland_surface *surface
                 struct wl_output *output;
                 pthread_mutex_lock(&process_wayland.output_mutex);
                 output = wayland_get_best_output_for_rect(&surface->window.rect);
-                if (output != surface->wl_output)
+                if (output != surface->requested_output)
                 {
-                    TRACE("Resetting fullscreen state: output %p surface output %p\n",
-                        output, surface->wl_output);
+                    TRACE("Resetting fullscreen state: output %p, old output %p\n",
+                        output, surface->requested_output);
                     xdg_toplevel_unset_fullscreen(surface->xdg_toplevel);
                     wl_display_flush(process_wayland.wl_display);
                     xdg_toplevel_set_fullscreen(surface->xdg_toplevel, output);
@@ -721,7 +677,7 @@ static void wayland_surface_reconfigure_geometry(struct wayland_surface *surface
                     /* In case we don't get enter event from compositor
                     happens on sway for instance
                     */
-                    surface->wl_output = output;
+                    surface->requested_output = output;
                 }
                 pthread_mutex_unlock(&process_wayland.output_mutex);
             }
diff --git a/dlls/winewayland.drv/waylanddrv.h b/dlls/winewayland.drv/waylanddrv.h
index d7b6529642e..3319e8b83eb 100644
--- a/dlls/winewayland.drv/waylanddrv.h
+++ b/dlls/winewayland.drv/waylanddrv.h
@@ -319,7 +319,7 @@ struct wayland_surface
     HWND hwnd;
 
     struct wl_surface *wl_surface;
-    struct wl_output *wl_output;
+    struct wl_output *requested_output;
     struct wp_viewport *wp_viewport;
     struct wp_fractional_scale_v1 *wp_fractional_scale_v1;
     /* FIXME: should this be moved? */
diff --git a/dlls/winewayland.drv/window.c b/dlls/winewayland.drv/window.c
index b84a0a42edb..474df01fe63 100644
--- a/dlls/winewayland.drv/window.c
+++ b/dlls/winewayland.drv/window.c
@@ -278,7 +278,7 @@ static void wayland_surface_update_state_toplevel(struct wayland_surface *surfac
             pthread_mutex_lock(&process_wayland.output_mutex);
             output = wayland_get_best_output_for_rect(&surface->window.rect);
             xdg_toplevel_set_fullscreen(surface->xdg_toplevel, output);
-            surface->wl_output = output;
+            surface->requested_output = output;
             pthread_mutex_unlock(&process_wayland.output_mutex);
         }
     }
-- 
2.50.1

